import{fl as A,eg as Te,ek as E,fm as W,fn as Z,bI as ye}from"./index-gOj9jnM2.js";function we(i,e){for(var P=0;P<e.length;P++){const f=e[P];if(typeof f!="string"&&!Array.isArray(f)){for(const $ in f)if($!=="default"&&!($ in i)){const l=Object.getOwnPropertyDescriptor(f,$);l&&Object.defineProperty(i,$,l.get?l:{enumerable:!0,get:()=>f[$]})}}}return Object.freeze(Object.defineProperty(i,Symbol.toStringTag,{value:"Module"}))}var C={},_={},O={},L={},D={},V={};/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */var oe;function xe(){return oe||(oe=1,function(i){(function(e){e(typeof DO_NOT_EXPORT_CRC>"u"?i:{})})(function(e){e.version="1.2.2";function P(){for(var c=0,y=new Array(256),p=0;p!=256;++p)c=p,c=c&1?-306674912^c>>>1:c>>>1,c=c&1?-306674912^c>>>1:c>>>1,c=c&1?-306674912^c>>>1:c>>>1,c=c&1?-306674912^c>>>1:c>>>1,c=c&1?-306674912^c>>>1:c>>>1,c=c&1?-306674912^c>>>1:c>>>1,c=c&1?-306674912^c>>>1:c>>>1,c=c&1?-306674912^c>>>1:c>>>1,y[p]=c;return typeof Int32Array<"u"?new Int32Array(y):y}var f=P();function $(c){var y=0,p=0,w=0,x=typeof Int32Array<"u"?new Int32Array(4096):new Array(4096);for(w=0;w!=256;++w)x[w]=c[w];for(w=0;w!=256;++w)for(p=c[w],y=256+w;y<4096;y+=256)p=x[y]=p>>>8^c[p&255];var S=[];for(w=1;w!=16;++w)S[w-1]=typeof Int32Array<"u"?x.subarray(w*256,w*256+256):x.slice(w*256,w*256+256);return S}var l=$(f),h=l[0],a=l[1],d=l[2],t=l[3],r=l[4],u=l[5],g=l[6],I=l[7],o=l[8],s=l[9],n=l[10],m=l[11],v=l[12],k=l[13],b=l[14];function T(c,y){for(var p=y^-1,w=0,x=c.length;w<x;)p=p>>>8^f[(p^c.charCodeAt(w++))&255];return~p}function H(c,y){for(var p=y^-1,w=c.length-15,x=0;x<w;)p=b[c[x++]^p&255]^k[c[x++]^p>>8&255]^v[c[x++]^p>>16&255]^m[c[x++]^p>>>24]^n[c[x++]]^s[c[x++]]^o[c[x++]]^I[c[x++]]^g[c[x++]]^u[c[x++]]^r[c[x++]]^t[c[x++]]^d[c[x++]]^a[c[x++]]^h[c[x++]]^f[c[x++]];for(w+=15;x<w;)p=p>>>8^f[(p^c[x++])&255];return~p}function B(c,y){for(var p=y^-1,w=0,x=c.length,S=0,K=0;w<x;)S=c.charCodeAt(w++),S<128?p=p>>>8^f[(p^S)&255]:S<2048?(p=p>>>8^f[(p^(192|S>>6&31))&255],p=p>>>8^f[(p^(128|S&63))&255]):S>=55296&&S<57344?(S=(S&1023)+64,K=c.charCodeAt(w++)&1023,p=p>>>8^f[(p^(240|S>>8&7))&255],p=p>>>8^f[(p^(128|S>>2&63))&255],p=p>>>8^f[(p^(128|K>>6&15|(S&3)<<4))&255],p=p>>>8^f[(p^(128|K&63))&255]):(p=p>>>8^f[(p^(224|S>>12&15))&255],p=p>>>8^f[(p^(128|S>>6&63))&255],p=p>>>8^f[(p^(128|S&63))&255]);return~p}e.table=f,e.bstr=T,e.buf=H,e.str=B})}(V)),V}const Be="goerli",Se=5,He=5,Ae="merge",Ce={type:"poa",algorithm:"clique",clique:{period:15,epoch:3e4}},Le="Cross-client PoA test network",Fe="https://github.com/goerli/testnet",_e={timestamp:"0x5c51a607",gasLimit:10485760,difficulty:1,nonce:"0x0000000000000000",extraData:"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},Oe=[{name:"chainstart",block:0,forkHash:"0xa3f5ab08"},{name:"homestead",block:0,forkHash:"0xa3f5ab08"},{name:"tangerineWhistle",block:0,forkHash:"0xa3f5ab08"},{name:"spuriousDragon",block:0,forkHash:"0xa3f5ab08"},{name:"byzantium",block:0,forkHash:"0xa3f5ab08"},{name:"constantinople",block:0,forkHash:"0xa3f5ab08"},{name:"petersburg",block:0,forkHash:"0xa3f5ab08"},{name:"istanbul",block:1561651,forkHash:"0xc25efa5c"},{name:"berlin",block:4460644,forkHash:"0x757a1c47"},{name:"london",block:5062605,forkHash:"0xb8c6299d"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818",name:"merge",ttd:"10790000",block:7382819,forkHash:"0xb8c6299d"},{name:"mergeForkIdTransition",block:null,forkHash:null},{name:"shanghai",block:null,timestamp:"1678832736",forkHash:"0xf9843abf"}],De=[{ip:"51.141.78.53",port:30303,id:"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a",location:"",comment:"Upstream bootnode 1"},{ip:"13.93.54.137",port:30303,id:"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b",location:"",comment:"Upstream bootnode 2"},{ip:"94.237.54.114",port:30313,id:"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291",location:"",comment:"Upstream bootnode 3"},{ip:"18.218.250.66",port:30313,id:"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949",location:"",comment:"Upstream bootnode 4"},{ip:"3.11.147.67",port:30303,id:"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91",location:"",comment:"Ethereum Foundation bootnode"},{ip:"51.15.116.226",port:30303,id:"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd",location:"",comment:"Goerli Initiative bootnode"},{ip:"51.15.119.157",port:30303,id:"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33",location:"",comment:"Goerli Initiative bootnode"},{ip:"51.15.119.157",port:40303,id:"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd",location:"",comment:"Goerli Initiative bootnode"}],Re=["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"],Ge={name:Be,chainId:Se,networkId:He,defaultHardfork:Ae,consensus:Ce,comment:Le,url:Fe,genesis:_e,hardforks:Oe,bootstrapNodes:De,dnsNetworks:Re},Me="mainnet",qe=1,Ne=1,ze="merge",Ue={type:"pow",algorithm:"ethash",ethash:{}},je="The Ethereum main chain",Ke="https://ethstats.net/",Ve={gasLimit:5e3,difficulty:17179869184,nonce:"0x0000000000000042",extraData:"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"},Je=[{name:"chainstart",block:0,forkHash:"0xfc64ec04"},{name:"homestead",block:115e4,forkHash:"0x97c2c34c"},{name:"dao",block:192e4,forkHash:"0x91d1f948"},{name:"tangerineWhistle",block:2463e3,forkHash:"0x7a64da13"},{name:"spuriousDragon",block:2675e3,forkHash:"0x3edd5b10"},{name:"byzantium",block:437e4,forkHash:"0xa00bc324"},{name:"constantinople",block:728e4,forkHash:"0x668db0af"},{name:"petersburg",block:728e4,forkHash:"0x668db0af"},{name:"istanbul",block:9069e3,forkHash:"0x879d6e30"},{name:"muirGlacier",block:92e5,forkHash:"0xe029e991"},{name:"berlin",block:12244e3,forkHash:"0x0eb440f6"},{name:"london",block:12965e3,forkHash:"0xb715077d"},{name:"arrowGlacier",block:13773e3,forkHash:"0x20c327fc"},{name:"grayGlacier",block:1505e4,forkHash:"0xf0afd0e3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393",name:"merge",ttd:"58750000000000000000000",block:15537394,forkHash:"0xf0afd0e3"},{name:"mergeForkIdTransition",block:null,forkHash:null},{name:"shanghai",block:null,timestamp:"1681338455",forkHash:"0xdce96c2d"}],Ye=[{ip:"18.138.108.67",port:30303,id:"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",location:"ap-southeast-1-001",comment:"bootnode-aws-ap-southeast-1-001"},{ip:"3.209.45.79",port:30303,id:"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",location:"us-east-1-001",comment:"bootnode-aws-us-east-1-001"},{ip:"65.108.70.101",port:30303,id:"2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",location:"eu-west-1-001",comment:"bootnode-hetzner-hel"},{ip:"157.90.35.166",port:30303,id:"4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",location:"eu-central-1-001",comment:"bootnode-hetzner-fsn"}],Xe=["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"],We={name:Me,chainId:qe,networkId:Ne,defaultHardfork:ze,consensus:Ue,comment:je,url:Ke,genesis:Ve,hardforks:Je,bootstrapNodes:Ye,dnsNetworks:Xe},Ze="rinkeby",Qe=4,et=4,tt="london",ot={type:"poa",algorithm:"clique",clique:{period:15,epoch:3e4}},st="PoA test network",nt="https://www.rinkeby.io",rt={timestamp:"0x58ee40ba",gasLimit:47e5,difficulty:1,nonce:"0x0000000000000000",extraData:"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},at=[{name:"chainstart",block:0,forkHash:"0x3b8e0691"},{name:"homestead",block:1,forkHash:"0x60949295"},{name:"tangerineWhistle",block:2,forkHash:"0x8bde40dd"},{name:"spuriousDragon",block:3,forkHash:"0xcb3a64bb"},{name:"byzantium",block:1035301,forkHash:"0x8d748b57"},{name:"constantinople",block:3660663,forkHash:"0xe49cab14"},{name:"petersburg",block:4321234,forkHash:"0xafec6b27"},{name:"istanbul",block:5435345,forkHash:"0xcbdb8838"},{name:"berlin",block:8290928,forkHash:"0x6910c8bd"},{name:"london",block:8897988,forkHash:"0x8e29f2f3"},{name:"merge",block:null,forkHash:null},{name:"shanghai",block:null,forkHash:null}],it=[{ip:"52.169.42.101",port:30303,id:"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf",location:"",comment:"IE"},{ip:"52.3.158.184",port:30303,id:"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8",location:"",comment:"INFURA"},{ip:"159.89.28.211",port:30303,id:"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6",location:"",comment:"AKASHA"}],ct=["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"],dt={name:Ze,chainId:Qe,networkId:et,defaultHardfork:tt,consensus:ot,comment:st,url:nt,genesis:rt,hardforks:at,bootstrapNodes:it,dnsNetworks:ct},ft="ropsten",ut=3,mt=3,ht="merge",lt={type:"pow",algorithm:"ethash",ethash:{}},gt="PoW test network",pt="https://github.com/ethereum/ropsten",bt={gasLimit:16777216,difficulty:1048576,nonce:"0x0000000000000042",extraData:"0x3535353535353535353535353535353535353535353535353535353535353535"},vt=[{name:"chainstart",block:0,forkHash:"0x30c7ddbc"},{name:"homestead",block:0,forkHash:"0x30c7ddbc"},{name:"tangerineWhistle",block:0,forkHash:"0x30c7ddbc"},{name:"spuriousDragon",block:10,forkHash:"0x63760190"},{name:"byzantium",block:17e5,forkHash:"0x3ea159c7"},{name:"constantinople",block:423e4,forkHash:"0x97b544f3"},{name:"petersburg",block:4939394,forkHash:"0xd6e2149b"},{name:"istanbul",block:6485846,forkHash:"0x4bc66396"},{name:"muirGlacier",block:7117117,forkHash:"0x6727ef90"},{name:"berlin",block:9812189,forkHash:"0xa157d377"},{name:"london",block:10499401,forkHash:"0x7119b6b3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge",name:"merge",ttd:"50000000000000000",block:null,forkHash:"0x7119b6b3"},{name:"mergeForkIdTransition",block:null,forkHash:null},{name:"shanghai",block:null,forkHash:null}],$t=[{ip:"52.176.7.10",port:30303,id:"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606",location:"",comment:"US-Azure geth"},{ip:"52.176.100.77",port:30303,id:"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c",location:"",comment:"US-Azure parity"},{ip:"52.232.243.152",port:30303,id:"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f",location:"",comment:"Parity"},{ip:"192.81.208.223",port:30303,id:"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09",location:"",comment:"@gpip"}],kt=["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"],It={name:ft,chainId:ut,networkId:mt,defaultHardfork:ht,consensus:lt,comment:gt,url:pt,genesis:bt,hardforks:vt,bootstrapNodes:$t,dnsNetworks:kt},Pt="sepolia",Et=11155111,Tt=11155111,yt="merge",wt={type:"pow",algorithm:"ethash",ethash:{}},xt="PoW test network to replace Ropsten",Bt="https://github.com/ethereum/go-ethereum/pull/23730",St={timestamp:"0x6159af19",gasLimit:3e7,difficulty:131072,nonce:"0x0000000000000000",extraData:"0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"},Ht=[{name:"chainstart",block:0,forkHash:"0xfe3366e7"},{name:"homestead",block:0,forkHash:"0xfe3366e7"},{name:"tangerineWhistle",block:0,forkHash:"0xfe3366e7"},{name:"spuriousDragon",block:0,forkHash:"0xfe3366e7"},{name:"byzantium",block:0,forkHash:"0xfe3366e7"},{name:"constantinople",block:0,forkHash:"0xfe3366e7"},{name:"petersburg",block:0,forkHash:"0xfe3366e7"},{name:"istanbul",block:0,forkHash:"0xfe3366e7"},{name:"muirGlacier",block:0,forkHash:"0xfe3366e7"},{name:"berlin",block:0,forkHash:"0xfe3366e7"},{name:"london",block:0,forkHash:"0xfe3366e7"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408",name:"merge",ttd:"17000000000000000",block:1450409,forkHash:"0xfe3366e7"},{name:"mergeForkIdTransition",block:1735371,forkHash:"0xb96cbd13"},{name:"shanghai",block:null,timestamp:"1677557088",forkHash:"0xf7f9bc08"}],At=[{ip:"18.168.182.86",port:30303,id:"9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066",location:"",comment:"geth"},{ip:"52.14.151.177",port:30303,id:"ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7",location:"",comment:"besu"},{ip:"165.22.196.173",port:30303,id:"ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6",location:"",comment:"EF"},{ip:"65.108.95.67",port:30303,id:"075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6",location:"",comment:"lodestar"}],Ct=["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"],Lt={name:Pt,chainId:Et,networkId:Tt,defaultHardfork:yt,consensus:wt,comment:xt,url:Bt,genesis:St,hardforks:Ht,bootstrapNodes:At,dnsNetworks:Ct};var R={};const Ft="EIP-1153",_t=1153,Ot="Transient Storage",Dt="https://eips.ethereum.org/EIPS/eip-1153",Rt="Review",Gt="chainstart",Mt=[],qt={},Nt={tstore:{v:100,d:"Base fee of the TSTORE opcode"},tload:{v:100,d:"Base fee of the TLOAD opcode"}},zt={},Ut={},jt={name:Ft,number:_t,comment:Ot,url:Dt,status:Rt,minimumHardfork:Gt,requiredEIPs:Mt,gasConfig:qt,gasPrices:Nt,vm:zt,pow:Ut},Kt="EIP-1559",Vt=1559,Jt="Fee market change for ETH 1.0 chain",Yt="https://eips.ethereum.org/EIPS/eip-1559",Xt="Final",Wt="berlin",Zt=[2930],Qt={baseFeeMaxChangeDenominator:{v:8,d:"Maximum base fee change denominator"},elasticityMultiplier:{v:2,d:"Maximum block gas target elasticity"},initialBaseFee:{v:1e9,d:"Initial base fee on first EIP1559 block"}},eo={},to={},oo={},so={name:Kt,number:Vt,comment:Jt,url:Yt,status:Xt,minimumHardfork:Wt,requiredEIPs:Zt,gasConfig:Qt,gasPrices:eo,vm:to,pow:oo},no="EIP-2315",ro=2315,ao="Simple subroutines for the EVM",io="https://eips.ethereum.org/EIPS/eip-2315",co="Draft",fo="istanbul",uo={},mo={beginsub:{v:2,d:"Base fee of the BEGINSUB opcode"},returnsub:{v:5,d:"Base fee of the RETURNSUB opcode"},jumpsub:{v:10,d:"Base fee of the JUMPSUB opcode"}},ho={},lo={},go={name:no,number:ro,comment:ao,url:io,status:co,minimumHardfork:fo,gasConfig:uo,gasPrices:mo,vm:ho,pow:lo},po="EIP-2537",bo=2537,vo="BLS12-381 precompiles",$o="https://eips.ethereum.org/EIPS/eip-2537",ko="Draft",Io="chainstart",Po={},Eo={Bls12381G1AddGas:{v:600,d:"Gas cost of a single BLS12-381 G1 addition precompile-call"},Bls12381G1MulGas:{v:12e3,d:"Gas cost of a single BLS12-381 G1 multiplication precompile-call"},Bls12381G2AddGas:{v:4500,d:"Gas cost of a single BLS12-381 G2 addition precompile-call"},Bls12381G2MulGas:{v:55e3,d:"Gas cost of a single BLS12-381 G2 multiplication precompile-call"},Bls12381PairingBaseGas:{v:115e3,d:"Base gas cost of BLS12-381 pairing check"},Bls12381PairingPerPairGas:{v:23e3,d:"Per-pair gas cost of BLS12-381 pairing check"},Bls12381MapG1Gas:{v:5500,d:"Gas cost of BLS12-381 map field element to G1"},Bls12381MapG2Gas:{v:11e4,d:"Gas cost of BLS12-381 map field element to G2"},Bls12381MultiExpGasDiscount:{v:[[1,1200],[2,888],[3,764],[4,641],[5,594],[6,547],[7,500],[8,453],[9,438],[10,423],[11,408],[12,394],[13,379],[14,364],[15,349],[16,334],[17,330],[18,326],[19,322],[20,318],[21,314],[22,310],[23,306],[24,302],[25,298],[26,294],[27,289],[28,285],[29,281],[30,277],[31,273],[32,269],[33,268],[34,266],[35,265],[36,263],[37,262],[38,260],[39,259],[40,257],[41,256],[42,254],[43,253],[44,251],[45,250],[46,248],[47,247],[48,245],[49,244],[50,242],[51,241],[52,239],[53,238],[54,236],[55,235],[56,233],[57,232],[58,231],[59,229],[60,228],[61,226],[62,225],[63,223],[64,222],[65,221],[66,220],[67,219],[68,219],[69,218],[70,217],[71,216],[72,216],[73,215],[74,214],[75,213],[76,213],[77,212],[78,211],[79,211],[80,210],[81,209],[82,208],[83,208],[84,207],[85,206],[86,205],[87,205],[88,204],[89,203],[90,202],[91,202],[92,201],[93,200],[94,199],[95,199],[96,198],[97,197],[98,196],[99,196],[100,195],[101,194],[102,193],[103,193],[104,192],[105,191],[106,191],[107,190],[108,189],[109,188],[110,188],[111,187],[112,186],[113,185],[114,185],[115,184],[116,183],[117,182],[118,182],[119,181],[120,180],[121,179],[122,179],[123,178],[124,177],[125,176],[126,176],[127,175],[128,174]],d:"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"}},To={},yo={},wo={name:po,number:bo,comment:vo,url:$o,status:ko,minimumHardfork:Io,gasConfig:Po,gasPrices:Eo,vm:To,pow:yo},xo="EIP-2565",Bo=2565,So="ModExp gas cost",Ho="https://eips.ethereum.org/EIPS/eip-2565",Ao="Final",Co="byzantium",Lo={},Fo={modexpGquaddivisor:{v:3,d:"Gquaddivisor from modexp precompile for gas calculation"}},_o={},Oo={},Do={name:xo,number:Bo,comment:So,url:Ho,status:Ao,minimumHardfork:Co,gasConfig:Lo,gasPrices:Fo,vm:_o,pow:Oo},Ro="EIP-2718",Go="Typed Transaction Envelope",Mo="https://eips.ethereum.org/EIPS/eip-2718",qo="Final",No="chainstart",zo={},Uo={},jo={},Ko={},Vo={name:Ro,comment:Go,url:Mo,status:qo,minimumHardfork:No,gasConfig:zo,gasPrices:Uo,vm:jo,pow:Ko},Jo="EIP-2929",Yo="Gas cost increases for state access opcodes",Xo="https://eips.ethereum.org/EIPS/eip-2929",Wo="Final",Zo="chainstart",Qo={},es={coldsload:{v:2100,d:"Gas cost of the first read of storage from a given location (per transaction)"},coldaccountaccess:{v:2600,d:"Gas cost of the first read of a given address (per transaction)"},warmstorageread:{v:100,d:"Gas cost of reading storage locations which have already loaded 'cold'"},sstoreCleanGasEIP2200:{v:2900,d:"Once per SSTORE operation from clean non-zero to something else"},sstoreNoopGasEIP2200:{v:100,d:"Once per SSTORE operation if the value doesn't change"},sstoreDirtyGasEIP2200:{v:100,d:"Once per SSTORE operation if a dirty value is changed"},sstoreInitRefundEIP2200:{v:19900,d:"Once per SSTORE operation for resetting to the original zero value"},sstoreCleanRefundEIP2200:{v:4900,d:"Once per SSTORE operation for resetting to the original non-zero value"},call:{v:0,d:"Base fee of the CALL opcode"},callcode:{v:0,d:"Base fee of the CALLCODE opcode"},delegatecall:{v:0,d:"Base fee of the DELEGATECALL opcode"},staticcall:{v:0,d:"Base fee of the STATICCALL opcode"},balance:{v:0,d:"Base fee of the BALANCE opcode"},extcodesize:{v:0,d:"Base fee of the EXTCODESIZE opcode"},extcodecopy:{v:0,d:"Base fee of the EXTCODECOPY opcode"},extcodehash:{v:0,d:"Base fee of the EXTCODEHASH opcode"},sload:{v:0,d:"Base fee of the SLOAD opcode"},sstore:{v:0,d:"Base fee of the SSTORE opcode"}},ts={},os={},ss={name:Jo,comment:Yo,url:Xo,status:Wo,minimumHardfork:Zo,gasConfig:Qo,gasPrices:es,vm:ts,pow:os},ns="EIP-2930",rs="Optional access lists",as="https://eips.ethereum.org/EIPS/eip-2930",is="Final",cs="istanbul",ds=[2718,2929],fs={},us={accessListStorageKeyCost:{v:1900,d:"Gas cost per storage key in an Access List transaction"},accessListAddressCost:{v:2400,d:"Gas cost per storage key in an Access List transaction"}},ms={},hs={},ls={name:ns,comment:rs,url:as,status:is,minimumHardfork:cs,requiredEIPs:ds,gasConfig:fs,gasPrices:us,vm:ms,pow:hs},gs="EIP-3074",ps=3074,bs="AUTH and AUTHCALL opcodes",vs="https://eips.ethereum.org/EIPS/eip-3074",$s="Review",ks="london",Is={},Ps={auth:{v:3100,d:"Gas cost of the AUTH opcode"},authcall:{v:0,d:"Gas cost of the AUTHCALL opcode"},authcallValueTransfer:{v:6700,d:"Paid for CALL when the value transfer is non-zero"}},Es={},Ts={},ys={name:gs,number:ps,comment:bs,url:vs,status:$s,minimumHardfork:ks,gasConfig:Is,gasPrices:Ps,vm:Es,pow:Ts},ws="EIP-3198",xs=3198,Bs="BASEFEE opcode",Ss="https://eips.ethereum.org/EIPS/eip-3198",Hs="Final",As="london",Cs={},Ls={basefee:{v:2,d:"Gas cost of the BASEFEE opcode"}},Fs={},_s={},Os={name:ws,number:xs,comment:Bs,url:Ss,status:Hs,minimumHardfork:As,gasConfig:Cs,gasPrices:Ls,vm:Fs,pow:_s},Ds="EIP-3529",Rs="Reduction in refunds",Gs="https://eips.ethereum.org/EIPS/eip-3529",Ms="Final",qs="berlin",Ns=[2929],zs={maxRefundQuotient:{v:5,d:"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},Us={selfdestructRefund:{v:0,d:"Refunded following a selfdestruct operation"},sstoreClearRefundEIP2200:{v:4800,d:"Once per SSTORE operation for clearing an originally existing storage slot"}},js={},Ks={},Vs={name:Ds,comment:Rs,url:Gs,status:Ms,minimumHardfork:qs,requiredEIPs:Ns,gasConfig:zs,gasPrices:Us,vm:js,pow:Ks},Js="EIP-3540",Ys=3540,Xs="EVM Object Format (EOF) v1",Ws="https://eips.ethereum.org/EIPS/eip-3540",Zs="Review",Qs="london",en=[3541],tn={},on={},sn={},nn={},rn={name:Js,number:Ys,comment:Xs,url:Ws,status:Zs,minimumHardfork:Qs,requiredEIPs:en,gasConfig:tn,gasPrices:on,vm:sn,pow:nn},an="EIP-3541",cn="Reject new contracts starting with the 0xEF byte",dn="https://eips.ethereum.org/EIPS/eip-3541",fn="Final",un="berlin",mn=[],hn={},ln={},gn={},pn={},bn={name:an,comment:cn,url:dn,status:fn,minimumHardfork:un,requiredEIPs:mn,gasConfig:hn,gasPrices:ln,vm:gn,pow:pn},vn="EIP-3554",$n="Reduction in refunds",kn="Difficulty Bomb Delay to December 1st 2021",In="Final",Pn="muirGlacier",En=[],Tn={},yn={},wn={},xn={difficultyBombDelay:{v:95e5,d:"the amount of blocks to delay the difficulty bomb with"}},Bn={name:vn,comment:$n,url:kn,status:In,minimumHardfork:Pn,requiredEIPs:En,gasConfig:Tn,gasPrices:yn,vm:wn,pow:xn},Sn="EIP-3607",Hn=3607,An="Reject transactions from senders with deployed code",Cn="https://eips.ethereum.org/EIPS/eip-3607",Ln="Final",Fn="chainstart",_n=[],On={},Dn={},Rn={},Gn={},Mn={name:Sn,number:Hn,comment:An,url:Cn,status:Ln,minimumHardfork:Fn,requiredEIPs:_n,gasConfig:On,gasPrices:Dn,vm:Rn,pow:Gn},qn="EIP-3651",Nn=3198,zn="Warm COINBASE",Un="https://eips.ethereum.org/EIPS/eip-3651",jn="Review",Kn="london",Vn=[2929],Jn={},Yn={},Xn={},Wn={},Zn={name:qn,number:Nn,comment:zn,url:Un,status:jn,minimumHardfork:Kn,requiredEIPs:Vn,gasConfig:Jn,gasPrices:Yn,vm:Xn,pow:Wn},Qn="EIP-3670",er=3670,tr="EOF - Code Validation",or="https://eips.ethereum.org/EIPS/eip-3670",sr="Review",nr="london",rr=[3540],ar={},ir={},cr={},dr={},fr={name:Qn,number:er,comment:tr,url:or,status:sr,minimumHardfork:nr,requiredEIPs:rr,gasConfig:ar,gasPrices:ir,vm:cr,pow:dr},ur="EIP-3675",mr=3675,hr="Upgrade consensus to Proof-of-Stake",lr="https://eips.ethereum.org/EIPS/eip-3675",gr="Final",pr="london",br=[],vr={},$r={},kr={},Ir={},Pr={name:ur,number:mr,comment:hr,url:lr,status:gr,minimumHardfork:pr,requiredEIPs:br,gasConfig:vr,gasPrices:$r,vm:kr,pow:Ir},Er="EIP-3855",Tr=3855,yr="PUSH0 instruction",wr="https://eips.ethereum.org/EIPS/eip-3855",xr="Review",Br="chainstart",Sr=[],Hr={},Ar={push0:{v:2,d:"Base fee of the PUSH0 opcode"}},Cr={},Lr={},Fr={name:Er,number:Tr,comment:yr,url:wr,status:xr,minimumHardfork:Br,requiredEIPs:Sr,gasConfig:Hr,gasPrices:Ar,vm:Cr,pow:Lr},_r="EIP-3860",Or=3860,Dr="Limit and meter initcode",Rr="https://eips.ethereum.org/EIPS/eip-3860",Gr="Review",Mr="spuriousDragon",qr=[],Nr={},zr={initCodeWordCost:{v:2,d:"Gas to pay for each word (32 bytes) of initcode when creating a contract"}},Ur={maxInitCodeSize:{v:49152,d:"Maximum length of initialization code when creating a contract"}},jr={},Kr={name:_r,number:Or,comment:Dr,url:Rr,status:Gr,minimumHardfork:Mr,requiredEIPs:qr,gasConfig:Nr,gasPrices:zr,vm:Ur,pow:jr},Vr="EIP-4345",Jr=4345,Yr="Difficulty Bomb Delay to June 2022",Xr="https://eips.ethereum.org/EIPS/eip-4345",Wr="Final",Zr="london",Qr={},ea={},ta={},oa={difficultyBombDelay:{v:107e5,d:"the amount of blocks to delay the difficulty bomb with"}},sa={name:Vr,number:Jr,comment:Yr,url:Xr,status:Wr,minimumHardfork:Zr,gasConfig:Qr,gasPrices:ea,vm:ta,pow:oa},na="EIP-4399",ra=4399,aa="Supplant DIFFICULTY opcode with PREVRANDAO",ia="https://eips.ethereum.org/EIPS/eip-4399",ca="Review",da="london",fa=[],ua={},ma={},ha={},la={},ga={name:na,number:ra,comment:aa,url:ia,status:ca,minimumHardfork:da,requiredEIPs:fa,gasConfig:ua,gasPrices:ma,vm:ha,pow:la},pa="EIP-4844",ba=4844,va="Shard Blob Transactions",$a="https://eips.ethereum.org/EIPS/eip-4844",ka="Draft",Ia="merge",Pa=[1559,2718,2930,4895],Ea={dataGasPerBlob:{v:131072,d:"The base fee for data gas per blob"},targetDataGasPerBlock:{v:262144,d:"The target data gas consumed per block"},maxDataGasPerBlock:{v:524288,d:"The max data gas allowable per block"},dataGasPriceUpdateFraction:{v:2225652,d:"The denominator used in the exponential when calculating a data gas price"}},Ta={simpleGasPerBlob:{v:12e3,d:"The basic gas fee for each blob"},minDataGasPrice:{v:1,d:"The minimum fee per data gas"},kzgPointEvaluationGasPrecompilePrice:{v:5e4,d:"The fee associated with the point evaluation precompile"},datahash:{v:3,d:"Base fee of the DATAHASH opcode"}},ya={blobCommitmentVersionKzg:{v:1,d:"The number indicated a versioned hash is a KZG commitment"},fieldElementsPerBlob:{v:4096,d:"The number of field elements allowed per blob"}},wa={},xa={},Ba={name:pa,number:ba,comment:va,url:$a,status:ka,minimumHardfork:Ia,requiredEIPs:Pa,gasConfig:Ea,gasPrices:Ta,sharding:ya,vm:wa,pow:xa},Sa="EIP-4895",Ha=4895,Aa="Beacon chain push withdrawals as operations",Ca="https://eips.ethereum.org/EIPS/eip-4895",La="Review",Fa="merge",_a=[],Oa={},Da={},Ra={},Ga={},Ma={name:Sa,number:Ha,comment:Aa,url:Ca,status:La,minimumHardfork:Fa,requiredEIPs:_a,gasConfig:Oa,gasPrices:Da,vm:Ra,pow:Ga},qa="EIP-5133",Na=5133,za="Delaying Difficulty Bomb to mid-September 2022",Ua="https://eips.ethereum.org/EIPS/eip-5133",ja="Draft",Ka="grayGlacier",Va={},Ja={},Ya={},Xa={difficultyBombDelay:{v:114e5,d:"the amount of blocks to delay the difficulty bomb with"}},Wa={name:qa,number:Na,comment:za,url:Ua,status:ja,minimumHardfork:Ka,gasConfig:Va,gasPrices:Ja,vm:Ya,pow:Xa};var se;function Za(){return se||(se=1,Object.defineProperty(R,"__esModule",{value:!0}),R.EIPs=void 0,R.EIPs={1153:jt,1559:so,2315:go,2537:wo,2565:Do,2718:Vo,2929:ss,2930:ls,3074:ys,3198:Os,3529:Vs,3540:rn,3541:bn,3554:Bn,3607:Mn,3651:Zn,3670:fr,3675:Pr,3855:Fr,3860:Kr,4345:sa,4399:ga,4844:Ba,4895:Ma,5133:Wa}),R}var J={},ne;function Q(){return ne||(ne=1,function(i){Object.defineProperty(i,"__esModule",{value:!0}),i.CustomChain=i.ConsensusAlgorithm=i.ConsensusType=i.Hardfork=i.Chain=void 0,function(e){e[e.Mainnet=1]="Mainnet",e[e.Ropsten=3]="Ropsten",e[e.Rinkeby=4]="Rinkeby",e[e.Goerli=5]="Goerli",e[e.Sepolia=11155111]="Sepolia"}(i.Chain||(i.Chain={})),function(e){e.Chainstart="chainstart",e.Homestead="homestead",e.Dao="dao",e.TangerineWhistle="tangerineWhistle",e.SpuriousDragon="spuriousDragon",e.Byzantium="byzantium",e.Constantinople="constantinople",e.Petersburg="petersburg",e.Istanbul="istanbul",e.MuirGlacier="muirGlacier",e.Berlin="berlin",e.London="london",e.ArrowGlacier="arrowGlacier",e.GrayGlacier="grayGlacier",e.MergeForkIdTransition="mergeForkIdTransition",e.Merge="merge",e.Shanghai="shanghai",e.ShardingForkDev="shardingFork"}(i.Hardfork||(i.Hardfork={})),function(e){e.ProofOfStake="pos",e.ProofOfWork="pow",e.ProofOfAuthority="poa"}(i.ConsensusType||(i.ConsensusType={})),function(e){e.Ethash="ethash",e.Clique="clique",e.Casper="casper"}(i.ConsensusAlgorithm||(i.ConsensusAlgorithm={})),function(e){e.PolygonMainnet="polygon-mainnet",e.PolygonMumbai="polygon-mumbai",e.ArbitrumRinkebyTestnet="arbitrum-rinkeby-testnet",e.ArbitrumOne="arbitrum-one",e.xDaiChain="x-dai-chain",e.OptimisticKovan="optimistic-kovan",e.OptimisticEthereum="optimistic-ethereum"}(i.CustomChain||(i.CustomChain={}))}(J)),J}var G={};const Qa="chainstart",ei="Start of the Ethereum main chain",ti="",oi="",si={minGasLimit:{v:5e3,d:"Minimum the gas limit may ever be"},gasLimitBoundDivisor:{v:1024,d:"The bound divisor of the gas limit, used in update calculations"},maxRefundQuotient:{v:2,d:"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},ni={base:{v:2,d:"Gas base cost, used e.g. for ChainID opcode (Istanbul)"},tierStep:{v:[0,2,3,5,8,10,20],d:"Once per operation, for a selection of them"},exp:{v:10,d:"Base fee of the EXP opcode"},expByte:{v:10,d:"Times ceil(log256(exponent)) for the EXP instruction"},sha3:{v:30,d:"Base fee of the SHA3 opcode"},sha3Word:{v:6,d:"Once per word of the SHA3 operation's data"},sload:{v:50,d:"Base fee of the SLOAD opcode"},sstoreSet:{v:2e4,d:"Once per SSTORE operation if the zeroness changes from zero"},sstoreReset:{v:5e3,d:"Once per SSTORE operation if the zeroness does not change from zero"},sstoreRefund:{v:15e3,d:"Once per SSTORE operation if the zeroness changes to zero"},jumpdest:{v:1,d:"Base fee of the JUMPDEST opcode"},log:{v:375,d:"Base fee of the LOG opcode"},logData:{v:8,d:"Per byte in a LOG* operation's data"},logTopic:{v:375,d:"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"},create:{v:32e3,d:"Base fee of the CREATE opcode"},call:{v:40,d:"Base fee of the CALL opcode"},callStipend:{v:2300,d:"Free gas given at beginning of call"},callValueTransfer:{v:9e3,d:"Paid for CALL when the value transfor is non-zero"},callNewAccount:{v:25e3,d:"Paid for CALL when the destination address didn't exist prior"},selfdestructRefund:{v:24e3,d:"Refunded following a selfdestruct operation"},memory:{v:3,d:"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"},quadCoeffDiv:{v:512,d:"Divisor for the quadratic particle of the memory cost equation"},createData:{v:200,d:""},tx:{v:21e3,d:"Per transaction. NOTE: Not payable on data of calls between transactions"},txCreation:{v:32e3,d:"The cost of creating a contract via tx"},txDataZero:{v:4,d:"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"},txDataNonZero:{v:68,d:"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},copy:{v:3,d:"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"},ecRecover:{v:3e3,d:""},sha256:{v:60,d:""},sha256Word:{v:12,d:""},ripemd160:{v:600,d:""},ripemd160Word:{v:120,d:""},identity:{v:15,d:""},identityWord:{v:3,d:""},stop:{v:0,d:"Base fee of the STOP opcode"},add:{v:3,d:"Base fee of the ADD opcode"},mul:{v:5,d:"Base fee of the MUL opcode"},sub:{v:3,d:"Base fee of the SUB opcode"},div:{v:5,d:"Base fee of the DIV opcode"},sdiv:{v:5,d:"Base fee of the SDIV opcode"},mod:{v:5,d:"Base fee of the MOD opcode"},smod:{v:5,d:"Base fee of the SMOD opcode"},addmod:{v:8,d:"Base fee of the ADDMOD opcode"},mulmod:{v:8,d:"Base fee of the MULMOD opcode"},signextend:{v:5,d:"Base fee of the SIGNEXTEND opcode"},lt:{v:3,d:"Base fee of the LT opcode"},gt:{v:3,d:"Base fee of the GT opcode"},slt:{v:3,d:"Base fee of the SLT opcode"},sgt:{v:3,d:"Base fee of the SGT opcode"},eq:{v:3,d:"Base fee of the EQ opcode"},iszero:{v:3,d:"Base fee of the ISZERO opcode"},and:{v:3,d:"Base fee of the AND opcode"},or:{v:3,d:"Base fee of the OR opcode"},xor:{v:3,d:"Base fee of the XOR opcode"},not:{v:3,d:"Base fee of the NOT opcode"},byte:{v:3,d:"Base fee of the BYTE opcode"},address:{v:2,d:"Base fee of the ADDRESS opcode"},balance:{v:20,d:"Base fee of the BALANCE opcode"},origin:{v:2,d:"Base fee of the ORIGIN opcode"},caller:{v:2,d:"Base fee of the CALLER opcode"},callvalue:{v:2,d:"Base fee of the CALLVALUE opcode"},calldataload:{v:3,d:"Base fee of the CALLDATALOAD opcode"},calldatasize:{v:2,d:"Base fee of the CALLDATASIZE opcode"},calldatacopy:{v:3,d:"Base fee of the CALLDATACOPY opcode"},codesize:{v:2,d:"Base fee of the CODESIZE opcode"},codecopy:{v:3,d:"Base fee of the CODECOPY opcode"},gasprice:{v:2,d:"Base fee of the GASPRICE opcode"},extcodesize:{v:20,d:"Base fee of the EXTCODESIZE opcode"},extcodecopy:{v:20,d:"Base fee of the EXTCODECOPY opcode"},blockhash:{v:20,d:"Base fee of the BLOCKHASH opcode"},coinbase:{v:2,d:"Base fee of the COINBASE opcode"},timestamp:{v:2,d:"Base fee of the TIMESTAMP opcode"},number:{v:2,d:"Base fee of the NUMBER opcode"},difficulty:{v:2,d:"Base fee of the DIFFICULTY opcode"},gaslimit:{v:2,d:"Base fee of the GASLIMIT opcode"},pop:{v:2,d:"Base fee of the POP opcode"},mload:{v:3,d:"Base fee of the MLOAD opcode"},mstore:{v:3,d:"Base fee of the MSTORE opcode"},mstore8:{v:3,d:"Base fee of the MSTORE8 opcode"},sstore:{v:0,d:"Base fee of the SSTORE opcode"},jump:{v:8,d:"Base fee of the JUMP opcode"},jumpi:{v:10,d:"Base fee of the JUMPI opcode"},pc:{v:2,d:"Base fee of the PC opcode"},msize:{v:2,d:"Base fee of the MSIZE opcode"},gas:{v:2,d:"Base fee of the GAS opcode"},push:{v:3,d:"Base fee of the PUSH opcode"},dup:{v:3,d:"Base fee of the DUP opcode"},swap:{v:3,d:"Base fee of the SWAP opcode"},callcode:{v:40,d:"Base fee of the CALLCODE opcode"},return:{v:0,d:"Base fee of the RETURN opcode"},invalid:{v:0,d:"Base fee of the INVALID opcode"},selfdestruct:{v:0,d:"Base fee of the SELFDESTRUCT opcode"}},ri={stackLimit:{v:1024,d:"Maximum size of VM stack allowed"},callCreateDepth:{v:1024,d:"Maximum depth of call/create stack"},maxExtraDataSize:{v:32,d:"Maximum size extra data may be after Genesis"}},ai={minimumDifficulty:{v:131072,d:"The minimum that the difficulty may ever be"},difficultyBoundDivisor:{v:2048,d:"The bound divisor of the difficulty, used in the update calculations"},durationLimit:{v:13,d:"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"},epochDuration:{v:3e4,d:"Duration between proof-of-work epochs"},timebombPeriod:{v:1e5,d:"Exponential difficulty timebomb period"},minerReward:{v:"5000000000000000000",d:"the amount a miner get rewarded for mining a block"},difficultyBombDelay:{v:0,d:"the amount of blocks to delay the difficulty bomb with"}},ii={name:Qa,comment:ei,url:ti,status:oi,gasConfig:si,gasPrices:ni,vm:ri,pow:ai},ci="homestead",di="Homestead hardfork with protocol and network changes",fi="https://eips.ethereum.org/EIPS/eip-606",ui="Final",mi={},hi={delegatecall:{v:40,d:"Base fee of the DELEGATECALL opcode"}},li={},gi={},pi={name:ci,comment:di,url:fi,status:ui,gasConfig:mi,gasPrices:hi,vm:li,pow:gi},bi="dao",vi="DAO rescue hardfork",$i="https://eips.ethereum.org/EIPS/eip-779",ki="Final",Ii={},Pi={},Ei={},Ti={},yi={name:bi,comment:vi,url:$i,status:ki,gasConfig:Ii,gasPrices:Pi,vm:Ei,pow:Ti},wi="tangerineWhistle",xi="Hardfork with gas cost changes for IO-heavy operations",Bi="https://eips.ethereum.org/EIPS/eip-608",Si="Final",Hi={},Ai={sload:{v:200,d:"Once per SLOAD operation"},call:{v:700,d:"Once per CALL operation & message call transaction"},extcodesize:{v:700,d:"Base fee of the EXTCODESIZE opcode"},extcodecopy:{v:700,d:"Base fee of the EXTCODECOPY opcode"},balance:{v:400,d:"Base fee of the BALANCE opcode"},delegatecall:{v:700,d:"Base fee of the DELEGATECALL opcode"},callcode:{v:700,d:"Base fee of the CALLCODE opcode"},selfdestruct:{v:5e3,d:"Base fee of the SELFDESTRUCT opcode"}},Ci={},Li={},Fi={name:wi,comment:xi,url:Bi,status:Si,gasConfig:Hi,gasPrices:Ai,vm:Ci,pow:Li},_i="spuriousDragon",Oi="HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",Di="https://eips.ethereum.org/EIPS/eip-607",Ri="Final",Gi={},Mi={expByte:{v:50,d:"Times ceil(log256(exponent)) for the EXP instruction"}},qi={maxCodeSize:{v:24576,d:"Maximum length of contract code"}},Ni={},zi={name:_i,comment:Oi,url:Di,status:Ri,gasConfig:Gi,gasPrices:Mi,vm:qi,pow:Ni},Ui="byzantium",ji="Hardfork with new precompiles, instructions and other protocol changes",Ki="https://eips.ethereum.org/EIPS/eip-609",Vi="Final",Ji={},Yi={modexpGquaddivisor:{v:20,d:"Gquaddivisor from modexp precompile for gas calculation"},ecAdd:{v:500,d:"Gas costs for curve addition precompile"},ecMul:{v:4e4,d:"Gas costs for curve multiplication precompile"},ecPairing:{v:1e5,d:"Base gas costs for curve pairing precompile"},ecPairingWord:{v:8e4,d:"Gas costs regarding curve pairing precompile input length"},revert:{v:0,d:"Base fee of the REVERT opcode"},staticcall:{v:700,d:"Base fee of the STATICCALL opcode"},returndatasize:{v:2,d:"Base fee of the RETURNDATASIZE opcode"},returndatacopy:{v:3,d:"Base fee of the RETURNDATACOPY opcode"}},Xi={},Wi={minerReward:{v:"3000000000000000000",d:"the amount a miner get rewarded for mining a block"},difficultyBombDelay:{v:3e6,d:"the amount of blocks to delay the difficulty bomb with"}},Zi={name:Ui,comment:ji,url:Ki,status:Vi,gasConfig:Ji,gasPrices:Yi,vm:Xi,pow:Wi},Qi="constantinople",ec="Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",tc="https://eips.ethereum.org/EIPS/eip-1013",oc="Final",sc={},nc={netSstoreNoopGas:{v:200,d:"Once per SSTORE operation if the value doesn't change"},netSstoreInitGas:{v:2e4,d:"Once per SSTORE operation from clean zero"},netSstoreCleanGas:{v:5e3,d:"Once per SSTORE operation from clean non-zero"},netSstoreDirtyGas:{v:200,d:"Once per SSTORE operation from dirty"},netSstoreClearRefund:{v:15e3,d:"Once per SSTORE operation for clearing an originally existing storage slot"},netSstoreResetRefund:{v:4800,d:"Once per SSTORE operation for resetting to the original non-zero value"},netSstoreResetClearRefund:{v:19800,d:"Once per SSTORE operation for resetting to the original zero value"},shl:{v:3,d:"Base fee of the SHL opcode"},shr:{v:3,d:"Base fee of the SHR opcode"},sar:{v:3,d:"Base fee of the SAR opcode"},extcodehash:{v:400,d:"Base fee of the EXTCODEHASH opcode"},create2:{v:32e3,d:"Base fee of the CREATE2 opcode"}},rc={},ac={minerReward:{v:"2000000000000000000",d:"The amount a miner gets rewarded for mining a block"},difficultyBombDelay:{v:5e6,d:"the amount of blocks to delay the difficulty bomb with"}},ic={name:Qi,comment:ec,url:tc,status:oc,gasConfig:sc,gasPrices:nc,vm:rc,pow:ac},cc="petersburg",dc="Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",fc="https://eips.ethereum.org/EIPS/eip-1716",uc="Final",mc={},hc={netSstoreNoopGas:{v:null,d:"Removed along EIP-1283"},netSstoreInitGas:{v:null,d:"Removed along EIP-1283"},netSstoreCleanGas:{v:null,d:"Removed along EIP-1283"},netSstoreDirtyGas:{v:null,d:"Removed along EIP-1283"},netSstoreClearRefund:{v:null,d:"Removed along EIP-1283"},netSstoreResetRefund:{v:null,d:"Removed along EIP-1283"},netSstoreResetClearRefund:{v:null,d:"Removed along EIP-1283"}},lc={},gc={},pc={name:cc,comment:dc,url:fc,status:uc,gasConfig:mc,gasPrices:hc,vm:lc,pow:gc},bc="istanbul",vc="HF targeted for December 2019 following the Constantinople/Petersburg HF",$c="https://eips.ethereum.org/EIPS/eip-1679",kc="Final",Ic={},Pc={blake2Round:{v:1,d:"Gas cost per round for the Blake2 F precompile"},ecAdd:{v:150,d:"Gas costs for curve addition precompile"},ecMul:{v:6e3,d:"Gas costs for curve multiplication precompile"},ecPairing:{v:45e3,d:"Base gas costs for curve pairing precompile"},ecPairingWord:{v:34e3,d:"Gas costs regarding curve pairing precompile input length"},txDataNonZero:{v:16,d:"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},sstoreSentryGasEIP2200:{v:2300,d:"Minimum gas required to be present for an SSTORE call, not consumed"},sstoreNoopGasEIP2200:{v:800,d:"Once per SSTORE operation if the value doesn't change"},sstoreDirtyGasEIP2200:{v:800,d:"Once per SSTORE operation if a dirty value is changed"},sstoreInitGasEIP2200:{v:2e4,d:"Once per SSTORE operation from clean zero to non-zero"},sstoreInitRefundEIP2200:{v:19200,d:"Once per SSTORE operation for resetting to the original zero value"},sstoreCleanGasEIP2200:{v:5e3,d:"Once per SSTORE operation from clean non-zero to something else"},sstoreCleanRefundEIP2200:{v:4200,d:"Once per SSTORE operation for resetting to the original non-zero value"},sstoreClearRefundEIP2200:{v:15e3,d:"Once per SSTORE operation for clearing an originally existing storage slot"},balance:{v:700,d:"Base fee of the BALANCE opcode"},extcodehash:{v:700,d:"Base fee of the EXTCODEHASH opcode"},chainid:{v:2,d:"Base fee of the CHAINID opcode"},selfbalance:{v:5,d:"Base fee of the SELFBALANCE opcode"},sload:{v:800,d:"Base fee of the SLOAD opcode"}},Ec={},Tc={},yc={name:bc,comment:vc,url:$c,status:kc,gasConfig:Ic,gasPrices:Pc,vm:Ec,pow:Tc},wc="muirGlacier",xc="HF to delay the difficulty bomb",Bc="https://eips.ethereum.org/EIPS/eip-2384",Sc="Final",Hc={},Ac={},Cc={},Lc={difficultyBombDelay:{v:9e6,d:"the amount of blocks to delay the difficulty bomb with"}},Fc={name:wc,comment:xc,url:Bc,status:Sc,gasConfig:Hc,gasPrices:Ac,vm:Cc,pow:Lc},_c="berlin",Oc="HF targeted for July 2020 following the Muir Glacier HF",Dc="https://eips.ethereum.org/EIPS/eip-2070",Rc="Final",Gc=[2565,2929,2718,2930],Mc={name:_c,comment:Oc,url:Dc,status:Rc,eips:Gc},qc="london",Nc="HF targeted for July 2021 following the Berlin fork",zc="https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",Uc="Final",jc=[1559,3198,3529,3541],Kc={name:qc,comment:Nc,url:zc,status:Uc,eips:jc},Vc="shanghai",Jc="Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",Yc="https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",Xc="Final",Wc=[3651,3855,3860,4895],Zc={name:Vc,comment:Jc,url:Yc,status:Xc,eips:Wc},Qc="arrowGlacier",ed="HF to delay the difficulty bomb",td="https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",od="Final",sd=[4345],nd={},rd={},ad={},id={},cd={name:Qc,comment:ed,url:td,status:od,eips:sd,gasConfig:nd,gasPrices:rd,vm:ad,pow:id},dd="grayGlacier",fd="Delaying the difficulty bomb to Mid September 2022",ud="https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",md="Draft",hd=[5133],ld={},gd={},pd={},bd={},vd={name:dd,comment:fd,url:ud,status:md,eips:hd,gasConfig:ld,gasPrices:gd,vm:pd,pow:bd},$d="mergeForkIdTransition",kd="Pre-merge hardfork to fork off non-upgraded clients",Id="https://eips.ethereum.org/EIPS/eip-3675",Pd="Draft",Ed=[],Td={name:$d,comment:kd,url:Id,status:Pd,eips:Ed},yd="merge",wd="Hardfork to upgrade the consensus mechanism to Proof-of-Stake",xd="https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",Bd="Final",Sd={type:"pos",algorithm:"casper",casper:{}},Hd=[3675,4399],Ad={name:yd,comment:wd,url:xd,status:Bd,consensus:Sd,eips:Hd},Cd="shardingFork",Ld="Internal hardfork to test proto-danksharding (do not use in production)",Fd="https://eips.ethereum.org/EIPS/eip-4844",_d="Experimental",Od=[4844],Dd={name:Cd,comment:Ld,url:Fd,status:_d,eips:Od};var re;function Rd(){return re||(re=1,Object.defineProperty(G,"__esModule",{value:!0}),G.hardforks=void 0,G.hardforks={chainstart:ii,homestead:pi,dao:yi,tangerineWhistle:Fi,spuriousDragon:zi,byzantium:Zi,constantinople:ic,petersburg:pc,istanbul:yc,muirGlacier:Fc,berlin:Mc,london:Kc,shanghai:Zc,arrowGlacier:cd,grayGlacier:vd,mergeForkIdTransition:Td,merge:Ad,shardingFork:Dd}),G}var M={},ae;function $e(){if(ae)return M;ae=1,Object.defineProperty(M,"__esModule",{value:!0}),M.parseGethGenesis=void 0;const i=A(),e=Q();function P(l){return!l||l==="0x0"?"0x0000000000000000":(0,i.isHexPrefixed)(l)?"0x"+(0,i.stripHexPrefix)(l).padStart(16,"0"):"0x"+l.padStart(16,"0")}function f(l,h=!0){const{name:a,config:d,difficulty:t,mixHash:r,gasLimit:u,coinbase:g,baseFeePerGas:I}=l;let{extraData:o,timestamp:s,nonce:n}=l;const m=Number(s),{chainId:v}=d;if(o===""&&(o="0x"),(0,i.isHexPrefixed)(s)||(s=(0,i.intToHex)(parseInt(s))),n.length!==18&&(n=P(n)),d.eip155Block!==d.eip158Block)throw new Error("EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork");const k={name:a,chainId:v,networkId:v,genesis:{timestamp:s,gasLimit:parseInt(u),difficulty:parseInt(t),nonce:n,extraData:o,mixHash:r,coinbase:g,baseFeePerGas:I},hardfork:void 0,hardforks:[],bootstrapNodes:[],consensus:d.clique!==void 0?{type:"poa",algorithm:"clique",clique:{period:d.clique.period??d.clique.blockperiodseconds,epoch:d.clique.epoch??d.clique.epochlength}}:{type:"pow",algorithm:"ethash",ethash:{}}},b={[e.Hardfork.Homestead]:{name:"homesteadBlock"},[e.Hardfork.Dao]:{name:"daoForkBlock"},[e.Hardfork.TangerineWhistle]:{name:"eip150Block"},[e.Hardfork.SpuriousDragon]:{name:"eip155Block"},[e.Hardfork.Byzantium]:{name:"byzantiumBlock"},[e.Hardfork.Constantinople]:{name:"constantinopleBlock"},[e.Hardfork.Petersburg]:{name:"petersburgBlock"},[e.Hardfork.Istanbul]:{name:"istanbulBlock"},[e.Hardfork.MuirGlacier]:{name:"muirGlacierBlock"},[e.Hardfork.Berlin]:{name:"berlinBlock"},[e.Hardfork.London]:{name:"londonBlock"},[e.Hardfork.MergeForkIdTransition]:{name:"mergeForkBlock",postMerge:h},[e.Hardfork.Shanghai]:{name:"shanghaiTime",postMerge:!0,isTimestamp:!0},[e.Hardfork.ShardingForkDev]:{name:"shardingForkTime",postMerge:!0,isTimestamp:!0}},T=Object.keys(b).reduce((c,y)=>(c[b[y].name]=y,c),{}),H=Object.keys(d).filter(c=>T[c]!==void 0&&d[c]!==void 0&&d[c]!==null);if(k.hardforks=H.map(c=>({name:T[c],block:b[T[c]].isTimestamp===!0||typeof d[c]!="number"?null:d[c],timestamp:b[T[c]].isTimestamp===!0&&typeof d[c]=="number"?d[c]:void 0})).filter(c=>c.block!==null||c.timestamp!==void 0),k.hardforks.sort(function(c,y){return(c.block??1/0)-(y.block??1/0)}),k.hardforks.sort(function(c,y){return(c.timestamp??m)-(y.timestamp??m)}),d.terminalTotalDifficulty!==void 0){const c={name:e.Hardfork.Merge,ttd:d.terminalTotalDifficulty,block:null},y=k.hardforks.findIndex(p=>b[p.name]?.postMerge===!0);y!==-1?k.hardforks.splice(y,0,c):k.hardforks.push(c)}const B=k.hardforks.length>0?k.hardforks.slice(-1)[0]:void 0;return k.hardfork=B?.name,k.hardforks.unshift({name:e.Hardfork.Chainstart,block:0}),k}function $(l,h,a){try{if(["config","difficulty","gasLimit","alloc"].some(d=>!(d in l)))throw new Error("Invalid format, expected geth genesis fields missing");return h!==void 0&&(l.name=h),f(l,a)}catch(d){throw new Error(`Error parsing parameters file: ${d.message}`)}}return M.parseGethGenesis=$,M}var ie;function Gd(){if(ie)return D;ie=1,Object.defineProperty(D,"__esModule",{value:!0}),D.Common=void 0;const i=A(),e=xe(),P=Te(),f=Ge,$=We,l=dt,h=It,a=Lt,d=Za(),t=Q(),r=Rd(),u=$e();class g extends P.EventEmitter{constructor(o){super(),this._eips=[],this._customChains=o.customChains??[],this._chainParams=this.setChain(o.chain),this.DEFAULT_HARDFORK=this._chainParams.defaultHardfork??t.Hardfork.Merge,this.HARDFORK_CHANGES=this.hardforks().map(s=>[s.name,r.hardforks[s.name]]),this._hardfork=this.DEFAULT_HARDFORK,o.hardfork!==void 0&&this.setHardfork(o.hardfork),o.eips&&this.setEIPs(o.eips)}static custom(o,s={}){const n=s.baseChain??"mainnet",m={...g._getChainParams(n)};if(m.name="custom-chain",typeof o!="string")return new g({chain:{...m,...o},...s});if(o===t.CustomChain.PolygonMainnet)return g.custom({name:t.CustomChain.PolygonMainnet,chainId:137,networkId:137},s);if(o===t.CustomChain.PolygonMumbai)return g.custom({name:t.CustomChain.PolygonMumbai,chainId:80001,networkId:80001},s);if(o===t.CustomChain.ArbitrumRinkebyTestnet)return g.custom({name:t.CustomChain.ArbitrumRinkebyTestnet,chainId:421611,networkId:421611},s);if(o===t.CustomChain.ArbitrumOne)return g.custom({name:t.CustomChain.ArbitrumOne,chainId:42161,networkId:42161},s);if(o===t.CustomChain.xDaiChain)return g.custom({name:t.CustomChain.xDaiChain,chainId:100,networkId:100},s);if(o===t.CustomChain.OptimisticKovan)return g.custom({name:t.CustomChain.OptimisticKovan,chainId:69,networkId:69},{hardfork:t.Hardfork.Berlin,...s});if(o===t.CustomChain.OptimisticEthereum)return g.custom({name:t.CustomChain.OptimisticEthereum,chainId:10,networkId:10},{hardfork:t.Hardfork.Berlin,...s});throw new Error(`Custom chain ${o} not supported`)}static fromGethGenesis(o,{chain:s,eips:n,genesisHash:m,hardfork:v,mergeForkIdPostMerge:k}){const b=(0,u.parseGethGenesis)(o,s,k),T=new g({chain:b.name??"custom",customChains:[b],eips:n,hardfork:v??b.hardfork});return m!==void 0&&T.setForkHashes(m),T}static isSupportedChainId(o){return!!this._getInitializedChains().names[o.toString()]}static _getChainParams(o,s){const n=this._getInitializedChains(s);if(typeof o=="number"||typeof o=="bigint"){if(o=o.toString(),n.names[o]){const m=n.names[o];return n[m]}throw new Error(`Chain with ID ${o} not supported`)}if(n[o]!==void 0)return n[o];throw new Error(`Chain with name ${o} not supported`)}setChain(o){if(typeof o=="number"||typeof o=="bigint"||typeof o=="string")this._chainParams=g._getChainParams(o,this._customChains);else if(typeof o=="object"){if(this._customChains.length>0)throw new Error("Chain must be a string, number, or bigint when initialized with customChains passed in");const s=["networkId","genesis","hardforks","bootstrapNodes"];for(const n of s)if(!(n in o))throw new Error(`Missing required chain parameter: ${n}`);this._chainParams=o}else throw new Error("Wrong input format");for(const s of this.hardforks())if(s.block===void 0)throw new Error("Hardfork cannot have undefined block number");return this._chainParams}setHardfork(o){let s=!1;for(const n of this.HARDFORK_CHANGES)n[0]===o&&(this._hardfork!==o&&(this._hardfork=o,this.emit("hardforkChanged",o)),s=!0);if(!s)throw new Error(`Hardfork with name ${o} not supported`)}getHardforkByBlockNumber(o,s,n){o=(0,i.toType)(o,i.TypeOutput.BigInt),s=(0,i.toType)(s,i.TypeOutput.BigInt),n=(0,i.toType)(n,i.TypeOutput.Number);const m=this.hardforks().filter(B=>B.block!==null||B.ttd!==null&&B.ttd!==void 0||B.timestamp!==void 0),v=m.findIndex(B=>B.ttd!==null&&B.ttd!==void 0);if(m.slice(v+1).findIndex(B=>B.ttd!==null&&B.ttd!==void 0)>=0)throw Error("More than one merge hardforks found with ttd specified");let b=m.findIndex(B=>B.block!==null&&B.block>o||n!==void 0&&Number(B.timestamp)>n);if(b===-1)b=m.length;else if(b===0)throw Error("Must have at least one hardfork at block 0");if(n===void 0){const B=m.slice(0,b).reverse().findIndex(c=>c.block!==null||c.ttd!==void 0);b=b-B}if(b=b-1,m[b].block===null&&m[b].timestamp===void 0)(s==null||BigInt(m[b].ttd)>s)&&(b-=1);else if(v>=0&&s!==void 0&&s!==null){if(b>=v&&BigInt(m[v].ttd)>s)throw Error("Maximum HF determined by total difficulty is lower than the block number HF");if(b<v&&BigInt(m[v].ttd)<=s)throw Error("HF determined by block number is lower than the minimum total difficulty HF")}const T=b;for(;b<m.length-1&&!(m[b].block!==m[b+1].block||m[b].timestamp!==m[b+1].timestamp);b++);if(n){if(m.slice(0,T).reduce((y,p)=>Math.max(Number(p.timestamp??"0"),y),0)>n)throw Error("Maximum HF determined by timestamp is lower than the block number/ttd HF");if(m.slice(b+1).reduce((y,p)=>Math.min(Number(p.timestamp??n),y),n)<n)throw Error("Maximum HF determined by block number/ttd is lower than timestamp HF")}return m[b].name}setHardforkByBlockNumber(o,s,n){const m=this.getHardforkByBlockNumber(o,s,n);return this.setHardfork(m),m}_getHardfork(o){const s=this.hardforks();for(const n of s)if(n.name===o)return n;return null}setEIPs(o=[]){for(const s of o){if(!(s in d.EIPs))throw new Error(`${s} not supported`);const n=this.gteHardfork(d.EIPs[s].minimumHardfork);if(!n)throw new Error(`${s} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${n}`);if(d.EIPs[s].requiredEIPs!==void 0){for(const m of d.EIPs[s].requiredEIPs)if(!(o.includes(m)||this.isActivatedEIP(m)))throw new Error(`${s} requires EIP ${m}, but is not included in the EIP list`)}}this._eips=o}param(o,s){let n;for(const m of this._eips)if(n=this.paramByEIP(o,s,m),n!==void 0)return n;return this.paramByHardfork(o,s,this._hardfork)}paramByHardfork(o,s,n){let m=null;for(const v of this.HARDFORK_CHANGES){if("eips"in v[1]){const k=v[1].eips;for(const b of k){const T=this.paramByEIP(o,s,b);m=typeof T=="bigint"?T:m}}else{if(v[1][o]===void 0)throw new Error(`Topic ${o} not defined`);v[1][o][s]!==void 0&&(m=v[1][o][s].v)}if(v[0]===n)break}return BigInt(m??0)}paramByEIP(o,s,n){if(!(n in d.EIPs))throw new Error(`${n} not supported`);const m=d.EIPs[n];if(!(o in m))throw new Error(`Topic ${o} not defined`);if(m[o][s]===void 0)return;const v=m[o][s].v;return BigInt(v)}paramByBlock(o,s,n,m,v){const k=this.getHardforkByBlockNumber(n,m,v);return this.paramByHardfork(o,s,k)}isActivatedEIP(o){if(this.eips().includes(o))return!0;for(const s of this.HARDFORK_CHANGES){const n=s[1];if(this.gteHardfork(n.name)&&"eips"in n&&n.eips.includes(o))return!0}return!1}hardforkIsActiveOnBlock(o,s){s=(0,i.toType)(s,i.TypeOutput.BigInt),o=o??this._hardfork;const n=this.hardforkBlock(o);return typeof n=="bigint"&&n!==BigInt(0)&&s>=n}activeOnBlock(o){return this.hardforkIsActiveOnBlock(null,o)}hardforkGteHardfork(o,s){o=o??this._hardfork;const n=this.hardforks();let m=-1,v=-1,k=0;for(const b of n)b.name===o&&(m=k),b.name===s&&(v=k),k+=1;return m>=v&&v!==-1}gteHardfork(o){return this.hardforkGteHardfork(null,o)}hardforkBlock(o){o=o??this._hardfork;const s=this._getHardfork(o)?.block;return s==null?null:BigInt(s)}hardforkTimestamp(o){o=o??this._hardfork;const s=this._getHardfork(o)?.timestamp;return s==null?null:BigInt(s)}eipBlock(o){for(const s of this.HARDFORK_CHANGES){const n=s[1];if("eips"in n&&n.eips.includes(o))return this.hardforkBlock(s[0])}return null}hardforkTTD(o){o=o??this._hardfork;const s=this._getHardfork(o)?.ttd;return s==null?null:BigInt(s)}isHardforkBlock(o,s){o=(0,i.toType)(o,i.TypeOutput.BigInt),s=s??this._hardfork;const n=this.hardforkBlock(s);return typeof n=="bigint"&&n!==BigInt(0)?n===o:!1}nextHardforkBlockOrTimestamp(o){o=o??this._hardfork;const s=this.hardforks();let n=s.findIndex(b=>b.name===o);if(o===t.Hardfork.Merge&&(n-=1),n<0)return null;let m=s[n].timestamp??s[n].block;m=m!=null?Number(m):null;const v=s.slice(n+1).find(b=>{let T=b.timestamp??b.block;return T=T!=null?Number(T):null,b.name!==t.Hardfork.Merge&&T!==null&&T!==void 0&&T!==m});if(v===void 0)return null;const k=v.timestamp??v.block;return k==null?null:BigInt(k)}nextHardforkBlock(o){o=o??this._hardfork;let s=this.hardforkBlock(o);if(s===null&&o===t.Hardfork.Merge){const m=this.hardforks(),v=m.findIndex(k=>k.ttd!==null&&k.ttd!==void 0);if(v<0)throw Error("Merge hardfork should have been found");s=this.hardforkBlock(m[v-1].name)}return s===null?null:this.hardforks().reduce((m,v)=>{const k=BigInt(v.block===null||v.ttd!==void 0&&v.ttd!==null?0:v.block);return k>s&&m===null?k:m},null)}isNextHardforkBlock(o,s){o=(0,i.toType)(o,i.TypeOutput.BigInt),s=s??this._hardfork;const n=this.nextHardforkBlock(s);return n===null?!1:n===o}_calcForkHash(o,s){let n=E.alloc(0),m=0;for(const b of this.hardforks()){const{block:T,timestamp:H,name:B}=b;let c=H??T;if(c=c!==null?Number(c):null,typeof c=="number"&&c!==0&&c!==m&&B!==t.Hardfork.Merge){const y=E.from(c.toString(16).padStart(16,"0"),"hex");n=E.concat([n,y]),m=c}if(b.name===o)break}const v=E.concat([s,n]);return`0x${(0,i.intToBuffer)((0,e.buf)(v)>>>0).toString("hex")}`}forkHash(o,s){o=o??this._hardfork;const n=this._getHardfork(o);if(n===null||n?.block===null&&n?.timestamp===void 0&&n?.ttd===void 0){const m="No fork hash calculation possible for future hardfork";throw new Error(m)}if(n?.forkHash!==null&&n?.forkHash!==void 0)return n.forkHash;if(!s)throw new Error("genesisHash required for forkHash calculation");return this._calcForkHash(o,s)}hardforkForForkHash(o){const s=this.hardforks().filter(n=>n.forkHash===o);return s.length>=1?s[s.length-1]:null}setForkHashes(o){for(const s of this.hardforks()){const n=s.timestamp??s.block;(s.forkHash===null||s.forkHash===void 0)&&(n!=null||typeof s.ttd<"u")&&(s.forkHash=this.forkHash(s.name,o))}}genesis(){return this._chainParams.genesis}hardforks(){return this._chainParams.hardforks}bootstrapNodes(){return this._chainParams.bootstrapNodes}dnsNetworks(){return this._chainParams.dnsNetworks}hardfork(){return this._hardfork}chainId(){return BigInt(this._chainParams.chainId)}chainName(){return this._chainParams.name}networkId(){return BigInt(this._chainParams.networkId)}eips(){return this._eips}consensusType(){const o=this.hardfork();let s;for(const n of this.HARDFORK_CHANGES)if("consensus"in n[1]&&(s=n[1].consensus.type),n[0]===o)break;return s??this._chainParams.consensus.type}consensusAlgorithm(){const o=this.hardfork();let s;for(const n of this.HARDFORK_CHANGES)if("consensus"in n[1]&&(s=n[1].consensus.algorithm),n[0]===o)break;return s??this._chainParams.consensus.algorithm}consensusConfig(){const o=this.hardfork();let s;for(const n of this.HARDFORK_CHANGES)if("consensus"in n[1]&&(s=n[1].consensus[n[1].consensus.algorithm]),n[0]===o)break;return s??this._chainParams.consensus[this.consensusAlgorithm()]??{}}copy(){const o=Object.assign(Object.create(Object.getPrototypeOf(this)),this);return o.removeAllListeners(),o}static _getInitializedChains(o){const s={};for(const[m,v]of Object.entries(t.Chain))s[v]=m.toLowerCase();const n={mainnet:$,ropsten:h,rinkeby:l,goerli:f,sepolia:a};if(o)for(const m of o){const{name:v}=m;s[m.chainId.toString()]=v,n[v]=m}return n.names=s,n}}return D.Common=g,D}var Y={},ce;function Md(){return ce||(ce=1,Object.defineProperty(Y,"__esModule",{value:!0})),Y}var de;function qd(){return de||(de=1,function(i){var e=L&&L.__createBinding||(Object.create?function(f,$,l,h){h===void 0&&(h=l);var a=Object.getOwnPropertyDescriptor($,l);(!a||("get"in a?!$.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return $[l]}}),Object.defineProperty(f,h,a)}:function(f,$,l,h){h===void 0&&(h=l),f[h]=$[l]}),P=L&&L.__exportStar||function(f,$){for(var l in f)l!=="default"&&!Object.prototype.hasOwnProperty.call($,l)&&e($,f,l)};Object.defineProperty(i,"__esModule",{value:!0}),P(Gd(),i),P(Q(),i),P(Md(),i),P($e(),i)}(L)),L}var X={},fe;function j(){return fe||(fe=1,function(i){Object.defineProperty(i,"__esModule",{value:!0}),i.isAccessList=i.isAccessListBuffer=i.Capability=void 0,function(f){f[f.EIP155ReplayProtection=155]="EIP155ReplayProtection",f[f.EIP1559FeeMarket=1559]="EIP1559FeeMarket",f[f.EIP2718TypedTransaction=2718]="EIP2718TypedTransaction",f[f.EIP2930AccessLists=2930]="EIP2930AccessLists"}(i.Capability||(i.Capability={}));function e(f){if(f.length===0)return!0;const $=f[0];return!!Array.isArray($)}i.isAccessListBuffer=e;function P(f){return!e(f)}i.isAccessList=P}(X)),X}var F={},ue;function ee(){if(ue)return F;ue=1,Object.defineProperty(F,"__esModule",{value:!0}),F.AccessLists=F.checkMaxInitCodeSize=void 0;const i=A(),e=j();function P($,l){const h=$.param("vm","maxInitCodeSize");if(h&&BigInt(l)>h)throw new Error(`the initcode size of this transaction is too large: it is ${l} while the max is ${$.param("vm","maxInitCodeSize")}`)}F.checkMaxInitCodeSize=P;class f{static getAccessListData(l){let h,a;if((0,e.isAccessList)(l)){h=l;const d=[];for(let t=0;t<l.length;t++){const r=l[t],u=(0,i.toBuffer)(r.address),g=[];for(let I=0;I<r.storageKeys.length;I++)g.push((0,i.toBuffer)(r.storageKeys[I]));d.push([u,g])}a=d}else{a=l??[];const d=[];for(let t=0;t<a.length;t++){const r=a[t],u=(0,i.bufferToHex)(r[0]),g=[];for(let o=0;o<r[1].length;o++)g.push((0,i.bufferToHex)(r[1][o]));const I={address:u,storageKeys:g};d.push(I)}h=d}return{AccessListJSON:h,accessList:a}}static verifyAccessList(l){for(let h=0;h<l.length;h++){const a=l[h],d=a[0],t=a[1];if(a[2]!==void 0)throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");if(d.length!==20)throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");for(let r=0;r<t.length;r++)if(t[r].length!==32)throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes")}}static getAccessListJSON(l){const h=[];for(let a=0;a<l.length;a++){const d=l[a],t={address:"0x"+(0,i.setLengthLeft)(d[0],20).toString("hex"),storageKeys:[]},r=d[1];for(let u=0;u<r.length;u++){const g=r[u];t.storageKeys.push("0x"+(0,i.setLengthLeft)(g,32).toString("hex"))}h.push(t)}return h}static getDataFeeEIP2930(l,h){const a=h.param("gasPrices","accessListStorageKeyCost"),d=h.param("gasPrices","accessListAddressCost");let t=0;for(let u=0;u<l.length;u++){const I=l[u][1];t+=I.length}return l.length*Number(d)+t*Number(a)}}return F.AccessLists=f,F}var me;function te(){if(me)return O;me=1,Object.defineProperty(O,"__esModule",{value:!0}),O.BaseTransaction=void 0;const i=qd(),e=A(),P=j(),f=ee();class ${constructor(h,a){this.cache={hash:void 0,dataFee:void 0},this.activeCapabilities=[],this.DEFAULT_CHAIN=i.Chain.Mainnet,this.DEFAULT_HARDFORK=i.Hardfork.Merge;const{nonce:d,gasLimit:t,to:r,value:u,data:g,v:I,r:o,s,type:n}=h;this._type=Number((0,e.bufferToBigInt)((0,e.toBuffer)(n))),this.txOptions=a;const m=(0,e.toBuffer)(r===""?"0x":r),v=(0,e.toBuffer)(I===""?"0x":I),k=(0,e.toBuffer)(o===""?"0x":o),b=(0,e.toBuffer)(s===""?"0x":s);this.nonce=(0,e.bufferToBigInt)((0,e.toBuffer)(d===""?"0x":d)),this.gasLimit=(0,e.bufferToBigInt)((0,e.toBuffer)(t===""?"0x":t)),this.to=m.length>0?new e.Address(m):void 0,this.value=(0,e.bufferToBigInt)((0,e.toBuffer)(u===""?"0x":u)),this.data=(0,e.toBuffer)(g===""?"0x":g),this.v=v.length>0?(0,e.bufferToBigInt)(v):void 0,this.r=k.length>0?(0,e.bufferToBigInt)(k):void 0,this.s=b.length>0?(0,e.bufferToBigInt)(b):void 0,this._validateCannotExceedMaxInteger({value:this.value,r:this.r,s:this.s}),this._validateCannotExceedMaxInteger({gasLimit:this.gasLimit},64),this._validateCannotExceedMaxInteger({nonce:this.nonce},64,!0);const T=this.to===void 0||this.to===null,H=a.allowUnlimitedInitCodeSize??!1,B=a.common??this._getCommon();T&&B.isActivatedEIP(3860)&&H===!1&&(0,f.checkMaxInitCodeSize)(B,this.data.length)}get type(){return this._type}supports(h){return this.activeCapabilities.includes(h)}validate(h=!1){const a=[];return this.getBaseFee()>this.gasLimit&&a.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`),this.isSigned()&&!this.verifySignature()&&a.push("Invalid Signature"),h?a:a.length===0}_validateYParity(){const{v:h}=this;if(h!==void 0&&h!==BigInt(0)&&h!==BigInt(1)){const a=this._errorMsg("The y-parity of the transaction should either be 0 or 1");throw new Error(a)}}_validateHighS(){const{s:h}=this;if(this.common.gteHardfork("homestead")&&h!==void 0&&h>e.SECP256K1_ORDER_DIV_2){const a=this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");throw new Error(a)}}getBaseFee(){const h=this.common.param("gasPrices","tx");let a=this.getDataFee();if(h&&(a+=h),this.common.gteHardfork("homestead")&&this.toCreationAddress()){const d=this.common.param("gasPrices","txCreation");d&&(a+=d)}return a}getDataFee(){const h=this.common.param("gasPrices","txDataZero"),a=this.common.param("gasPrices","txDataNonZero");let d=BigInt(0);for(let t=0;t<this.data.length;t++)this.data[t]===0?d+=h:d+=a;if((this.to===void 0||this.to===null)&&this.common.isActivatedEIP(3860)){const t=BigInt(Math.ceil(this.data.length/32)),r=this.common.param("gasPrices","initCodeWordCost")*t;d+=r}return d}toCreationAddress(){return this.to===void 0||this.to.buf.length===0}isSigned(){const{v:h,r:a,s:d}=this;return!(h===void 0||a===void 0||d===void 0)}verifySignature(){try{const h=this.getSenderPublicKey();return(0,e.unpadBuffer)(h).length!==0}catch{return!1}}getSenderAddress(){return new e.Address((0,e.publicToAddress)(this.getSenderPublicKey()))}sign(h){if(h.length!==32){const I=this._errorMsg("Private key must be 32 bytes in length.");throw new Error(I)}let a=!1;this.type===0&&this.common.gteHardfork("spuriousDragon")&&!this.supports(P.Capability.EIP155ReplayProtection)&&(this.activeCapabilities.push(P.Capability.EIP155ReplayProtection),a=!0);const d=this.getMessageToSign(!0),{v:t,r,s:u}=(0,e.ecsign)(d,h),g=this._processSignature(t,r,u);if(a){const I=this.activeCapabilities.indexOf(P.Capability.EIP155ReplayProtection);I>-1&&this.activeCapabilities.splice(I,1)}return g}_getCommon(h,a){if(a!==void 0){const d=(0,e.bufferToBigInt)((0,e.toBuffer)(a));if(h){if(h.chainId()!==d){const t=this._errorMsg("The chain ID does not match the chain ID of Common");throw new Error(t)}return h.copy()}else return i.Common.isSupportedChainId(d)?new i.Common({chain:d,hardfork:this.DEFAULT_HARDFORK}):i.Common.custom({name:"custom-chain",networkId:d,chainId:d},{baseChain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})}else return h?.copy()??new i.Common({chain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})}_validateCannotExceedMaxInteger(h,a=256,d=!1){for(const[t,r]of Object.entries(h))switch(a){case 64:if(d){if(r!==void 0&&r>=e.MAX_UINT64){const u=this._errorMsg(`${t} cannot equal or exceed MAX_UINT64 (2^64-1), given ${r}`);throw new Error(u)}}else if(r!==void 0&&r>e.MAX_UINT64){const u=this._errorMsg(`${t} cannot exceed MAX_UINT64 (2^64-1), given ${r}`);throw new Error(u)}break;case 256:if(d){if(r!==void 0&&r>=e.MAX_INTEGER){const u=this._errorMsg(`${t} cannot equal or exceed MAX_INTEGER (2^256-1), given ${r}`);throw new Error(u)}}else if(r!==void 0&&r>e.MAX_INTEGER){const u=this._errorMsg(`${t} cannot exceed MAX_INTEGER (2^256-1), given ${r}`);throw new Error(u)}break;default:{const u=this._errorMsg("unimplemented bits value");throw new Error(u)}}}static _validateNotArray(h){const a=["nonce","gasPrice","gasLimit","to","value","data","v","r","s","type","baseFee","maxFeePerGas","chainId"];for(const[d,t]of Object.entries(h))if(a.includes(d)&&Array.isArray(t))throw new Error(`${d} cannot be an array`)}_getSharedErrorPostfix(){let h="";try{h=this.isSigned()?(0,e.bufferToHex)(this.hash()):"not available (unsigned)"}catch{h="error"}let a="";try{a=this.isSigned().toString()}catch{h="error"}let d="";try{d=this.common.hardfork()}catch{d="error"}let t=`tx type=${this.type} hash=${h} nonce=${this.nonce} value=${this.value} `;return t+=`signed=${a} hf=${d}`,t}}return O.BaseTransaction=$,O}var he;function ke(){if(he)return _;he=1,Object.defineProperty(_,"__esModule",{value:!0}),_.FeeMarketEIP1559Transaction=void 0;const i=W(),e=A(),P=Z(),f=te(),$=ee(),l=2,h=E.from(l.toString(16).padStart(2,"0"),"hex");class a extends f.BaseTransaction{constructor(t,r={}){super({...t,type:l},r),this.DEFAULT_HARDFORK="london";const{chainId:u,accessList:g,maxFeePerGas:I,maxPriorityFeePerGas:o}=t;if(this.common=this._getCommon(r.common,u),this.chainId=this.common.chainId(),this.common.isActivatedEIP(1559)===!1)throw new Error("EIP-1559 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([1559,2718,2930]);const s=$.AccessLists.getAccessListData(g??[]);if(this.accessList=s.accessList,this.AccessListJSON=s.AccessListJSON,$.AccessLists.verifyAccessList(this.accessList),this.maxFeePerGas=(0,e.bufferToBigInt)((0,e.toBuffer)(I===""?"0x":I)),this.maxPriorityFeePerGas=(0,e.bufferToBigInt)((0,e.toBuffer)(o===""?"0x":o)),this._validateCannotExceedMaxInteger({maxFeePerGas:this.maxFeePerGas,maxPriorityFeePerGas:this.maxPriorityFeePerGas}),f.BaseTransaction._validateNotArray(t),this.gasLimit*this.maxFeePerGas>e.MAX_INTEGER){const m=this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)");throw new Error(m)}if(this.maxFeePerGas<this.maxPriorityFeePerGas){const m=this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");throw new Error(m)}this._validateYParity(),this._validateHighS(),(r?.freeze??!0)&&Object.freeze(this)}static fromTxData(t,r={}){return new a(t,r)}static fromSerializedTx(t,r={}){if(!t.slice(0,1).equals(h))throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${l}, received: ${t.slice(0,1).toString("hex")}`);const u=(0,e.arrToBufArr)(i.RLP.decode(t.slice(1)));if(!Array.isArray(u))throw new Error("Invalid serialized tx input: must be array");return a.fromValuesArray(u,r)}static fromValuesArray(t,r={}){if(t.length!==9&&t.length!==12)throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");const[u,g,I,o,s,n,m,v,k,b,T,H]=t;return this._validateNotArray({chainId:u,v:b}),(0,e.validateNoLeadingZeroes)({nonce:g,maxPriorityFeePerGas:I,maxFeePerGas:o,gasLimit:s,value:m,v:b,r:T,s:H}),new a({chainId:(0,e.bufferToBigInt)(u),nonce:g,maxPriorityFeePerGas:I,maxFeePerGas:o,gasLimit:s,to:n,value:m,data:v,accessList:k??[],v:b!==void 0?(0,e.bufferToBigInt)(b):void 0,r:T,s:H},r)}getDataFee(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;let t=super.getDataFee();return t+=BigInt($.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:t,hardfork:this.common.hardfork()}),t}getUpfrontCost(t=BigInt(0)){const r=this.maxPriorityFeePerGas,u=this.maxFeePerGas-t,I=(r<u?r:u)+t;return this.gasLimit*I+this.value}raw(){return[(0,e.bigIntToUnpaddedBuffer)(this.chainId),(0,e.bigIntToUnpaddedBuffer)(this.nonce),(0,e.bigIntToUnpaddedBuffer)(this.maxPriorityFeePerGas),(0,e.bigIntToUnpaddedBuffer)(this.maxFeePerGas),(0,e.bigIntToUnpaddedBuffer)(this.gasLimit),this.to!==void 0?this.to.buf:E.from([]),(0,e.bigIntToUnpaddedBuffer)(this.value),this.data,this.accessList,this.v!==void 0?(0,e.bigIntToUnpaddedBuffer)(this.v):E.from([]),this.r!==void 0?(0,e.bigIntToUnpaddedBuffer)(this.r):E.from([]),this.s!==void 0?(0,e.bigIntToUnpaddedBuffer)(this.s):E.from([])]}serialize(){const t=this.raw();return E.concat([h,E.from(i.RLP.encode((0,e.bufArrToArr)(t)))])}getMessageToSign(t=!0){const r=this.raw().slice(0,9),u=E.concat([h,E.from(i.RLP.encode((0,e.bufArrToArr)(r)))]);return t?E.from((0,P.keccak256)(u)):u}hash(){if(!this.isSigned()){const t=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(t)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=E.from((0,P.keccak256)(this.serialize()))),this.cache.hash):E.from((0,P.keccak256)(this.serialize()))}getMessageToVerifySignature(){return this.getMessageToSign()}getSenderPublicKey(){if(!this.isSigned()){const I=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(I)}const t=this.getMessageToVerifySignature(),{v:r,r:u,s:g}=this;this._validateHighS();try{return(0,e.ecrecover)(t,r+BigInt(27),(0,e.bigIntToUnpaddedBuffer)(u),(0,e.bigIntToUnpaddedBuffer)(g))}catch{const o=this._errorMsg("Invalid Signature");throw new Error(o)}}_processSignature(t,r,u){const g={...this.txOptions,common:this.common};return a.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:t-BigInt(27),r:(0,e.bufferToBigInt)(r),s:(0,e.bufferToBigInt)(u)},g)}toJSON(){const t=$.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,e.bigIntToHex)(this.chainId),nonce:(0,e.bigIntToHex)(this.nonce),maxPriorityFeePerGas:(0,e.bigIntToHex)(this.maxPriorityFeePerGas),maxFeePerGas:(0,e.bigIntToHex)(this.maxFeePerGas),gasLimit:(0,e.bigIntToHex)(this.gasLimit),to:this.to!==void 0?this.to.toString():void 0,value:(0,e.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:t,v:this.v!==void 0?(0,e.bigIntToHex)(this.v):void 0,r:this.r!==void 0?(0,e.bigIntToHex)(this.r):void 0,s:this.s!==void 0?(0,e.bigIntToHex)(this.s):void 0}}errorStr(){let t=this._getSharedErrorPostfix();return t+=` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`,t}_errorMsg(t){return`${t} (${this.errorStr()})`}}return _.FeeMarketEIP1559Transaction=a,_}var q={},le;function Ie(){if(le)return q;le=1,Object.defineProperty(q,"__esModule",{value:!0}),q.AccessListEIP2930Transaction=void 0;const i=W(),e=A(),P=Z(),f=te(),$=ee(),l=1,h=E.from(l.toString(16).padStart(2,"0"),"hex");class a extends f.BaseTransaction{constructor(t,r={}){super({...t,type:l},r),this.DEFAULT_HARDFORK="berlin";const{chainId:u,accessList:g,gasPrice:I}=t;if(this.common=this._getCommon(r.common,u),this.chainId=this.common.chainId(),!this.common.isActivatedEIP(2930))throw new Error("EIP-2930 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([2718,2930]);const o=$.AccessLists.getAccessListData(g??[]);if(this.accessList=o.accessList,this.AccessListJSON=o.AccessListJSON,$.AccessLists.verifyAccessList(this.accessList),this.gasPrice=(0,e.bufferToBigInt)((0,e.toBuffer)(I===""?"0x":I)),this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),f.BaseTransaction._validateNotArray(t),this.gasPrice*this.gasLimit>e.MAX_INTEGER){const n=this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER");throw new Error(n)}this._validateYParity(),this._validateHighS(),(r?.freeze??!0)&&Object.freeze(this)}static fromTxData(t,r={}){return new a(t,r)}static fromSerializedTx(t,r={}){if(!t.slice(0,1).equals(h))throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${l}, received: ${t.slice(0,1).toString("hex")}`);const u=(0,e.arrToBufArr)(i.RLP.decode(Uint8Array.from(t.slice(1))));if(!Array.isArray(u))throw new Error("Invalid serialized tx input: must be array");return a.fromValuesArray(u,r)}static fromValuesArray(t,r={}){if(t.length!==8&&t.length!==11)throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");const[u,g,I,o,s,n,m,v,k,b,T]=t;this._validateNotArray({chainId:u,v:k}),(0,e.validateNoLeadingZeroes)({nonce:g,gasPrice:I,gasLimit:o,value:n,v:k,r:b,s:T});const H=[];return new a({chainId:(0,e.bufferToBigInt)(u),nonce:g,gasPrice:I,gasLimit:o,to:s,value:n,data:m,accessList:v??H,v:k!==void 0?(0,e.bufferToBigInt)(k):void 0,r:b,s:T},r)}getDataFee(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;let t=super.getDataFee();return t+=BigInt($.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:t,hardfork:this.common.hardfork()}),t}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}raw(){return[(0,e.bigIntToUnpaddedBuffer)(this.chainId),(0,e.bigIntToUnpaddedBuffer)(this.nonce),(0,e.bigIntToUnpaddedBuffer)(this.gasPrice),(0,e.bigIntToUnpaddedBuffer)(this.gasLimit),this.to!==void 0?this.to.buf:E.from([]),(0,e.bigIntToUnpaddedBuffer)(this.value),this.data,this.accessList,this.v!==void 0?(0,e.bigIntToUnpaddedBuffer)(this.v):E.from([]),this.r!==void 0?(0,e.bigIntToUnpaddedBuffer)(this.r):E.from([]),this.s!==void 0?(0,e.bigIntToUnpaddedBuffer)(this.s):E.from([])]}serialize(){const t=this.raw();return E.concat([h,E.from(i.RLP.encode((0,e.bufArrToArr)(t)))])}getMessageToSign(t=!0){const r=this.raw().slice(0,8),u=E.concat([h,E.from(i.RLP.encode((0,e.bufArrToArr)(r)))]);return t?E.from((0,P.keccak256)(u)):u}hash(){if(!this.isSigned()){const t=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(t)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=E.from((0,P.keccak256)(this.serialize()))),this.cache.hash):E.from((0,P.keccak256)(this.serialize()))}getMessageToVerifySignature(){return this.getMessageToSign()}getSenderPublicKey(){if(!this.isSigned()){const I=this._errorMsg("Cannot call this method if transaction is not signed");throw new Error(I)}const t=this.getMessageToVerifySignature(),{v:r,r:u,s:g}=this;this._validateHighS();try{return(0,e.ecrecover)(t,r+BigInt(27),(0,e.bigIntToUnpaddedBuffer)(u),(0,e.bigIntToUnpaddedBuffer)(g))}catch{const o=this._errorMsg("Invalid Signature");throw new Error(o)}}_processSignature(t,r,u){const g={...this.txOptions,common:this.common};return a.fromTxData({chainId:this.chainId,nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:t-BigInt(27),r:(0,e.bufferToBigInt)(r),s:(0,e.bufferToBigInt)(u)},g)}toJSON(){const t=$.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,e.bigIntToHex)(this.chainId),nonce:(0,e.bigIntToHex)(this.nonce),gasPrice:(0,e.bigIntToHex)(this.gasPrice),gasLimit:(0,e.bigIntToHex)(this.gasLimit),to:this.to!==void 0?this.to.toString():void 0,value:(0,e.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:t,v:this.v!==void 0?(0,e.bigIntToHex)(this.v):void 0,r:this.r!==void 0?(0,e.bigIntToHex)(this.r):void 0,s:this.s!==void 0?(0,e.bigIntToHex)(this.s):void 0}}errorStr(){let t=this._getSharedErrorPostfix();return t+=` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length??0}`,t}_errorMsg(t){return`${t} (${this.errorStr()})`}}return q.AccessListEIP2930Transaction=a,q}var N={},ge;function Pe(){if(ge)return N;ge=1,Object.defineProperty(N,"__esModule",{value:!0}),N.Transaction=void 0;const i=W(),e=A(),P=Z(),f=te(),$=j(),l=0;function h(d,t){const r=Number(d),u=Number(t)*2;return r===u+35||r===u+36}class a extends f.BaseTransaction{constructor(t,r={}){if(super({...t,type:l},r),this.common=this._validateTxV(this.v,r.common),this.gasPrice=(0,e.bufferToBigInt)((0,e.toBuffer)(t.gasPrice===""?"0x":t.gasPrice)),this.gasPrice*this.gasLimit>e.MAX_INTEGER){const g=this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)");throw new Error(g)}this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),f.BaseTransaction._validateNotArray(t),this.common.gteHardfork("spuriousDragon")&&(this.isSigned()?h(this.v,this.common.chainId())&&this.activeCapabilities.push($.Capability.EIP155ReplayProtection):this.activeCapabilities.push($.Capability.EIP155ReplayProtection)),(r?.freeze??!0)&&Object.freeze(this)}static fromTxData(t,r={}){return new a(t,r)}static fromSerializedTx(t,r={}){const u=(0,e.arrToBufArr)(i.RLP.decode(Uint8Array.from(t)));if(!Array.isArray(u))throw new Error("Invalid serialized tx input. Must be array");return this.fromValuesArray(u,r)}static fromValuesArray(t,r={}){if(t.length!==6&&t.length!==9)throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");const[u,g,I,o,s,n,m,v,k]=t;return(0,e.validateNoLeadingZeroes)({nonce:u,gasPrice:g,gasLimit:I,value:s,v:m,r:v,s:k}),new a({nonce:u,gasPrice:g,gasLimit:I,to:o,value:s,data:n,v:m,r:v,s:k},r)}raw(){return[(0,e.bigIntToUnpaddedBuffer)(this.nonce),(0,e.bigIntToUnpaddedBuffer)(this.gasPrice),(0,e.bigIntToUnpaddedBuffer)(this.gasLimit),this.to!==void 0?this.to.buf:E.from([]),(0,e.bigIntToUnpaddedBuffer)(this.value),this.data,this.v!==void 0?(0,e.bigIntToUnpaddedBuffer)(this.v):E.from([]),this.r!==void 0?(0,e.bigIntToUnpaddedBuffer)(this.r):E.from([]),this.s!==void 0?(0,e.bigIntToUnpaddedBuffer)(this.s):E.from([])]}serialize(){return E.from(i.RLP.encode((0,e.bufArrToArr)(this.raw())))}_getMessageToSign(){const t=[(0,e.bigIntToUnpaddedBuffer)(this.nonce),(0,e.bigIntToUnpaddedBuffer)(this.gasPrice),(0,e.bigIntToUnpaddedBuffer)(this.gasLimit),this.to!==void 0?this.to.buf:E.from([]),(0,e.bigIntToUnpaddedBuffer)(this.value),this.data];return this.supports($.Capability.EIP155ReplayProtection)&&(t.push((0,e.bigIntToUnpaddedBuffer)(this.common.chainId())),t.push((0,e.unpadBuffer)((0,e.toBuffer)(0))),t.push((0,e.unpadBuffer)((0,e.toBuffer)(0)))),t}getMessageToSign(t=!0){const r=this._getMessageToSign();return t?E.from((0,P.keccak256)(i.RLP.encode((0,e.bufArrToArr)(r)))):r}getDataFee(){return this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork()?this.cache.dataFee.value:(Object.isFrozen(this)&&(this.cache.dataFee={value:super.getDataFee(),hardfork:this.common.hardfork()}),super.getDataFee())}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}hash(){if(!this.isSigned()){const t=this._errorMsg("Cannot call hash method if transaction is not signed");throw new Error(t)}return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=E.from((0,P.keccak256)(i.RLP.encode((0,e.bufArrToArr)(this.raw()))))),this.cache.hash):E.from((0,P.keccak256)(i.RLP.encode((0,e.bufArrToArr)(this.raw()))))}getMessageToVerifySignature(){if(!this.isSigned()){const r=this._errorMsg("This transaction is not signed");throw new Error(r)}const t=this._getMessageToSign();return E.from((0,P.keccak256)(i.RLP.encode((0,e.bufArrToArr)(t))))}getSenderPublicKey(){const t=this.getMessageToVerifySignature(),{v:r,r:u,s:g}=this;this._validateHighS();try{return(0,e.ecrecover)(t,r,(0,e.bigIntToUnpaddedBuffer)(u),(0,e.bigIntToUnpaddedBuffer)(g),this.supports($.Capability.EIP155ReplayProtection)?this.common.chainId():void 0)}catch{const o=this._errorMsg("Invalid Signature");throw new Error(o)}}_processSignature(t,r,u){this.supports($.Capability.EIP155ReplayProtection)&&(t+=this.common.chainId()*BigInt(2)+BigInt(8));const g={...this.txOptions,common:this.common};return a.fromTxData({nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,v:t,r:(0,e.bufferToBigInt)(r),s:(0,e.bufferToBigInt)(u)},g)}toJSON(){return{nonce:(0,e.bigIntToHex)(this.nonce),gasPrice:(0,e.bigIntToHex)(this.gasPrice),gasLimit:(0,e.bigIntToHex)(this.gasLimit),to:this.to!==void 0?this.to.toString():void 0,value:(0,e.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),v:this.v!==void 0?(0,e.bigIntToHex)(this.v):void 0,r:this.r!==void 0?(0,e.bigIntToHex)(this.r):void 0,s:this.s!==void 0?(0,e.bigIntToHex)(this.s):void 0}}_validateTxV(t,r){let u;const g=t!==void 0?Number(t):void 0;if(g!==void 0&&g<37&&g!==27&&g!==28)throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${g}`);if(g!==void 0&&g!==0&&(!r||r.gteHardfork("spuriousDragon"))&&g!==27&&g!==28)if(r){if(!h(BigInt(g),r.chainId()))throw new Error(`Incompatible EIP155-based V ${g} and chain id ${r.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`)}else{let I;(g-35)%2===0?I=35:I=36,u=BigInt(g-I)/BigInt(2)}return this._getCommon(r,u)}errorStr(){let t=this._getSharedErrorPostfix();return t+=` gasPrice=${this.gasPrice}`,t}_errorMsg(t){return`${t} (${this.errorStr()})`}}return N.Transaction=a,N}var z={},U={},pe;function Nd(){if(pe)return U;pe=1,Object.defineProperty(U,"__esModule",{value:!0}),U.normalizeTxParams=void 0;const i=A(),e=P=>{const f=Object.assign({},P);return f.gasLimit=(0,i.toType)(f.gasLimit??f.gas,i.TypeOutput.BigInt),f.data=f.data===void 0?f.input:f.data,f.gasPrice=f.gasPrice!==void 0?BigInt(f.gasPrice):void 0,f.value=f.value!==void 0?BigInt(f.value):void 0,f.to=f.to!==null&&f.to!==void 0?(0,i.setLengthLeft)((0,i.toBuffer)(f.to),20):null,f.v=f.v==="0x0"?"0x":f.v,f.r=f.r==="0x0"?"0x":f.r,f.s=f.s==="0x0"?"0x":f.s,f.v!=="0x"&&(f.v=(0,i.toType)(f.v,i.TypeOutput.BigInt)),f};return U.normalizeTxParams=e,U}var be;function zd(){if(be)return z;be=1,Object.defineProperty(z,"__esModule",{value:!0}),z.TransactionFactory=void 0;const i=A(),e=ke(),P=Ie(),f=Nd(),$=Pe();class l{constructor(){}static fromTxData(a,d={}){if(!("type"in a)||a.type===void 0)return $.Transaction.fromTxData(a,d);{const t=Number((0,i.bufferToBigInt)((0,i.toBuffer)(a.type)));if(t===0)return $.Transaction.fromTxData(a,d);if(t===1)return P.AccessListEIP2930Transaction.fromTxData(a,d);if(t===2)return e.FeeMarketEIP1559Transaction.fromTxData(a,d);throw new Error(`Tx instantiation with type ${t} not supported`)}}static fromSerializedData(a,d={}){if(a[0]<=127)switch(a[0]){case 1:return P.AccessListEIP2930Transaction.fromSerializedTx(a,d);case 2:return e.FeeMarketEIP1559Transaction.fromSerializedTx(a,d);default:throw new Error(`TypedTransaction with ID ${a[0]} unknown`)}else return $.Transaction.fromSerializedTx(a,d)}static fromBlockBodyData(a,d={}){if(E.isBuffer(a))return this.fromSerializedData(a,d);if(Array.isArray(a))return $.Transaction.fromValuesArray(a,d);throw new Error("Cannot decode transaction: unknown type input")}static async fromEthersProvider(a,d,t){const r=(0,i.getProvider)(a),u=await(0,i.fetchFromProvider)(r,{method:"eth_getTransactionByHash",params:[d]});if(u===null)throw new Error("No data returned from provider");return l.fromRPCTx(u,t)}static async fromRPCTx(a,d={}){return l.fromTxData((0,f.normalizeTxParams)(a),d)}}return z.TransactionFactory=l,z}var ve;function Ud(){return ve||(ve=1,function(i){var e=C&&C.__createBinding||(Object.create?function(a,d,t,r){r===void 0&&(r=t);var u=Object.getOwnPropertyDescriptor(d,t);(!u||("get"in u?!d.__esModule:u.writable||u.configurable))&&(u={enumerable:!0,get:function(){return d[t]}}),Object.defineProperty(a,r,u)}:function(a,d,t,r){r===void 0&&(r=t),a[r]=d[t]}),P=C&&C.__exportStar||function(a,d){for(var t in a)t!=="default"&&!Object.prototype.hasOwnProperty.call(d,t)&&e(d,a,t)};Object.defineProperty(i,"__esModule",{value:!0}),i.TransactionFactory=i.Transaction=i.AccessListEIP2930Transaction=i.FeeMarketEIP1559Transaction=void 0;var f=ke();Object.defineProperty(i,"FeeMarketEIP1559Transaction",{enumerable:!0,get:function(){return f.FeeMarketEIP1559Transaction}});var $=Ie();Object.defineProperty(i,"AccessListEIP2930Transaction",{enumerable:!0,get:function(){return $.AccessListEIP2930Transaction}});var l=Pe();Object.defineProperty(i,"Transaction",{enumerable:!0,get:function(){return l.Transaction}});var h=zd();Object.defineProperty(i,"TransactionFactory",{enumerable:!0,get:function(){return h.TransactionFactory}}),P(j(),i)}(C)),C}var Ee=Ud();const jd=ye(Ee),Vd=we({__proto__:null,default:jd},[Ee]);export{Ee as d,Vd as i,qd as r};
